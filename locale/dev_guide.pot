# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-07-14 13:15+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../doc/1.7/dev_guide/box_protocol.rst:33
#: ../doc/1.7/dev_guide/box_protocol.rst:5
msgid "Tarantool's binary protocol"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:35
#: ../doc/1.7/dev_guide/box_protocol.rst:7
msgid "Tarantool's binary protocol is a binary request/response protocol."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:39
#: ../doc/1.7/dev_guide/box_protocol.rst:11
msgid "Notation in diagrams"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:41
#: ../doc/1.7/dev_guide/box_protocol.rst:13
msgid "0    X\n"
"+----+\n"
"|    | - X bytes\n"
"+----+\n"
" TYPE - type of MsgPack value (if it is a MsgPack object)\n"
"\n"
"+====+\n"
"|    | - Variable size MsgPack object\n"
"+====+\n"
" TYPE - type of MsgPack value\n"
"\n"
"+~~~~+\n"
"|    | - Variable size MsgPack Array/Map\n"
"+~~~~+\n"
" TYPE - type of MsgPack value"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:60
#: ../doc/1.7/dev_guide/box_protocol.rst:32
msgid "MsgPack data types:"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:62
#: ../doc/1.7/dev_guide/box_protocol.rst:34
msgid "**MP_INT** - Integer"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:63
#: ../doc/1.7/dev_guide/box_protocol.rst:35
msgid "**MP_MAP** - Map"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:64
#: ../doc/1.7/dev_guide/box_protocol.rst:36
msgid "**MP_ARR** - Array"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:65
#: ../doc/1.7/dev_guide/box_protocol.rst:37
msgid "**MP_STRING** - String"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:66
#: ../doc/1.7/dev_guide/box_protocol.rst:38
msgid "**MP_FIXSTR** - Fixed size string"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:67
#: ../doc/1.7/dev_guide/box_protocol.rst:39
msgid "**MP_OBJECT** - Any MsgPack object"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:68
#: ../doc/1.7/dev_guide/box_protocol.rst:40
msgid "**MP_BIN** - MsgPack binary format"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:72
#: ../doc/1.7/dev_guide/box_protocol.rst:44
msgid "Greeting packet"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:74
#: ../doc/1.7/dev_guide/box_protocol.rst:46
msgid "TARANTOOL'S GREETING:\n"
"\n"
"0                                     63\n"
"+--------------------------------------+\n"
"|                                      |\n"
"| Tarantool Greeting (server version)  |\n"
"|               64 bytes               |\n"
"+---------------------+----------------+\n"
"|                     |                |\n"
"| BASE64 encoded SALT |      NULL      |\n"
"|      44 bytes       |                |\n"
"+---------------------+----------------+\n"
"64                  107              127"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:90
#: ../doc/1.7/dev_guide/box_protocol.rst:62
msgid "The server instance begins the dialogue by sending a fixed-size (128-byte) text greeting to the client. The greeting always contains two 64-byte lines of ASCII text, each line ending with a newline character ('\\\\n'). The first line contains the instance version and protocol type. The second line contains up to 44 bytes of base64-encoded random string, to use in the authentication packet, and ends with up to 23 spaces."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:98
#: ../doc/1.7/dev_guide/box_protocol.rst:70
msgid "Unified packet structure"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:100
#: ../doc/1.7/dev_guide/box_protocol.rst:72
msgid "Once a greeting is read, the protocol becomes pure request/response and features a complete access to Tarantool functionality, including:"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:103
#: ../doc/1.7/dev_guide/box_protocol.rst:75
msgid "request multiplexing, e.g. ability to asynchronously issue multiple requests via the same connection"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:105
#: ../doc/1.7/dev_guide/box_protocol.rst:77
msgid "response format that supports zero-copy writes"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:107
#: ../doc/1.7/dev_guide/box_protocol.rst:79
msgid "For data structuring and encoding, the protocol uses msgpack data format, see http://msgpack.org"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:110
#: ../doc/1.7/dev_guide/box_protocol.rst:82
msgid "The Tarantool protocol mandates use of a few integer constants serving as keys in maps used in the protocol. These constants are defined in `src/box/iproto_constants.h <https://github.com/tarantool/tarantool/blob/1.7/src/box/iproto_constants.h>`_"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:114
#: ../doc/1.7/dev_guide/box_protocol.rst:86
msgid "We list them here too:"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:116
#: ../doc/1.7/dev_guide/box_protocol.rst:88
msgid "-- user keys\n"
"<code>          ::= 0x00\n"
"<sync>          ::= 0x01\n"
"<schema_id>     ::= 0x05\n"
"<space_id>      ::= 0x10\n"
"<index_id>      ::= 0x11\n"
"<limit>         ::= 0x12\n"
"<offset>        ::= 0x13\n"
"<iterator>      ::= 0x14\n"
"<key>           ::= 0x20\n"
"<tuple>         ::= 0x21\n"
"<function_name> ::= 0x22\n"
"<username>      ::= 0x23\n"
"<expression>    ::= 0x27\n"
"<ops>           ::= 0x28\n"
"<data>          ::= 0x30\n"
"<error>         ::= 0x31"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:136
#: ../doc/1.7/dev_guide/box_protocol.rst:108
msgid "-- -- Value for <code> key in request can be:\n"
"-- User command codes\n"
"<select>  ::= 0x01\n"
"<insert>  ::= 0x02\n"
"<replace> ::= 0x03\n"
"<update>  ::= 0x04\n"
"<delete>  ::= 0x05\n"
"<call_16> ::= 0x06\n"
"<auth>    ::= 0x07\n"
"<eval>    ::= 0x08\n"
"<upsert>  ::= 0x09\n"
"<call>    ::= 0x0a\n"
"-- Admin command codes\n"
"<ping>    ::= 0x40\n"
"\n"
"-- -- Value for <code> key in response can be:\n"
"<OK>      ::= 0x00\n"
"<ERROR>   ::= 0x8XXX"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:158
#: ../doc/1.7/dev_guide/box_protocol.rst:130
msgid "Both :code:`<header>` and :code:`<body>` are msgpack maps:"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:160
#: ../doc/1.7/dev_guide/box_protocol.rst:132
msgid "Request/Response:\n"
"\n"
"0        5\n"
"+--------+ +============+ +===================================+\n"
"| BODY + | |            | |                                   |\n"
"| HEADER | |   HEADER   | |               BODY                |\n"
"|  SIZE  | |            | |                                   |\n"
"+--------+ +============+ +===================================+\n"
"  MP_INT       MP_MAP                     MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:172
#: ../doc/1.7/dev_guide/box_protocol.rst:144
msgid "UNIFIED HEADER:\n"
"\n"
"+================+================+=====================+\n"
"|                |                |                     |\n"
"|   0x00: CODE   |   0x01: SYNC   |    0x05: SCHEMA_ID  |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT |  MP_INT: MP_INT     |\n"
"|                |                |                     |\n"
"+================+================+=====================+\n"
"                          MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:184
#: ../doc/1.7/dev_guide/box_protocol.rst:156
msgid "They only differ in the allowed set of keys and values. The key defines the type of value that follows. If a body has no keys, the entire msgpack map for the body may be missing. Such is the case, for example, for a <ping> request. ``schema_id`` may be absent in the request's header, meaning that there will be no version checking, but it must be present in the response. If ``schema_id`` is sent in the header, then it will be checked."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:195
#: ../doc/1.7/dev_guide/box_protocol.rst:167
msgid "Authentication"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:197
#: ../doc/1.7/dev_guide/box_protocol.rst:169
msgid "When a client connects to the server instance, the instance responds with a 128-byte text greeting message. Part of the greeting is base-64 encoded session salt - a random string which can be used for authentication. The length of decoded salt (44 bytes) exceeds the amount necessary to sign the authentication message (first 20 bytes). An excess is reserved for future authentication schemas."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:204
#: ../doc/1.7/dev_guide/box_protocol.rst:176
msgid "PREPARE SCRAMBLE:\n"
"\n"
"    LEN(ENCODED_SALT) = 44;\n"
"    LEN(SCRAMBLE)     = 20;\n"
"\n"
"prepare 'chap-sha1' scramble:\n"
"\n"
"    salt = base64_decode(encoded_salt);\n"
"    step_1 = sha1(password);\n"
"    step_2 = sha1(step_1);\n"
"    step_3 = sha1(salt, step_2);\n"
"    scramble = xor(step_1, step_3);\n"
"    return scramble;\n"
"\n"
"AUTHORIZATION BODY: CODE = 0x07\n"
"\n"
"+==================+====================================+\n"
"|                  |        +-------------+-----------+ |\n"
"|  (KEY)           | (TUPLE)|  len == 9   | len == 20 | |\n"
"|   0x23:USERNAME  |   0x21:| \"chap-sha1\" |  SCRAMBLE | |\n"
"| MP_INT:MP_STRING | MP_INT:|  MP_STRING  |  MP_BIN   | |\n"
"|                  |        +-------------+-----------+ |\n"
"|                  |                   MP_ARRAY         |\n"
"+==================+====================================+\n"
"                        MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:232
#: ../doc/1.7/dev_guide/box_protocol.rst:204
msgid ":code:`<key>` holds the user name. :code:`<tuple>` must be an array of 2 fields: authentication mechanism (\"chap-sha1\" is the only supported mechanism right now) and password, encrypted according to the specified mechanism. Authentication in Tarantool is optional, if no authentication is performed, session user is 'guest'. The instance responds to authentication packet with a standard response with 0 tuples."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:240
#: ../doc/1.7/dev_guide/box_protocol.rst:212
msgid "Requests"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:242
#: ../doc/1.7/dev_guide/box_protocol.rst:214
msgid "SELECT: CODE - 0x01 Find tuples matching the search pattern"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:245
#: ../doc/1.7/dev_guide/box_protocol.rst:217
msgid "SELECT BODY:\n"
"\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID |   0x12: LIMIT    |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_INT   |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x13: OFFSET   |   0x14: ITERATOR |   0x20: KEY      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"                          MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:262
#: ../doc/1.7/dev_guide/box_protocol.rst:234
msgid "INSERT:  CODE - 0x02 Inserts tuple into the space, if no tuple with same unique keys exists. Otherwise throw *duplicate key* error."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:264
#: ../doc/1.7/dev_guide/box_protocol.rst:236
msgid "REPLACE: CODE - 0x03 Insert a tuple into the space or replace an existing one."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:267
#: ../doc/1.7/dev_guide/box_protocol.rst:239
msgid "INSERT/REPLACE BODY:\n"
"\n"
"+==================+==================+\n"
"|                  |                  |\n"
"|   0x10: SPACE_ID |   0x21: TUPLE    |\n"
"| MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |\n"
"+==================+==================+\n"
"                 MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:280
#: ../doc/1.7/dev_guide/box_protocol.rst:252
msgid "UPDATE: CODE - 0x04 Update a tuple"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:283
#: ../doc/1.7/dev_guide/box_protocol.rst:255
msgid "UPDATE BODY:\n"
"\n"
"+==================+=======================+\n"
"|                  |                       |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT        |\n"
"|                  |                       |\n"
"+==================+=======================+\n"
"|                  |          +~~~~~~~~~~+ |\n"
"|                  |          |          | |\n"
"|                  | (TUPLE)  |    OP    | |\n"
"|   0x20: KEY      |    0x21: |          | |\n"
"| MP_INT: MP_ARRAY |  MP_INT: +~~~~~~~~~~+ |\n"
"|                  |            MP_ARRAY   |\n"
"+==================+=======================+\n"
"                 MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:302
#: ../doc/1.7/dev_guide/box_protocol.rst:274
msgid "OP:\n"
"    Works only for integer fields:\n"
"    * Addition    OP = '+' . space[key][field_no] += argument\n"
"    * Subtraction OP = '-' . space[key][field_no] -= argument\n"
"    * Bitwise AND OP = '&' . space[key][field_no] &= argument\n"
"    * Bitwise XOR OP = '^' . space[key][field_no] ^= argument\n"
"    * Bitwise OR  OP = '|' . space[key][field_no] |= argument\n"
"    Works on any fields:\n"
"    * Delete      OP = '#'\n"
"      delete <argument> fields starting\n"
"      from <field_no> in the space[<key>]\n"
"\n"
"0           2\n"
"+-----------+==========+==========+\n"
"|           |          |          |\n"
"|    OP     | FIELD_NO | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  |\n"
"|           |          |          |\n"
"+-----------+==========+==========+\n"
"              MP_ARRAY"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:325
#: ../doc/1.7/dev_guide/box_protocol.rst:297
msgid "    * Insert      OP = '!'\n"
"      insert <argument> before <field_no>\n"
"    * Assign      OP = '='\n"
"      assign <argument> to field <field_no>.\n"
"      will extend the tuple if <field_no> == <max_field_no> + 1\n"
"\n"
"0           2\n"
"+-----------+==========+===========+\n"
"|           |          |           |\n"
"|    OP     | FIELD_NO | ARGUMENT  |\n"
"| MP_FIXSTR |  MP_INT  | MP_OBJECT |\n"
"|           |          |           |\n"
"+-----------+==========+===========+\n"
"              MP_ARRAY\n"
"\n"
"    Works on string fields:\n"
"    * Splice      OP = ':'\n"
"      take the string from space[key][field_no] and\n"
"      substitute <offset> bytes from <position> with <argument>"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:347
#: ../doc/1.7/dev_guide/box_protocol.rst:319
msgid "0           2\n"
"+-----------+==========+==========+========+==========+\n"
"|           |          |          |        |          |\n"
"|    ':'    | FIELD_NO | POSITION | OFFSET | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  | MP_INT |  MP_STR  |\n"
"|           |          |          |        |          |\n"
"+-----------+==========+==========+========+==========+\n"
"                         MP_ARRAY"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:359
#: ../doc/1.7/dev_guide/box_protocol.rst:331
msgid "It is an error to specify an argument of a type that differs from the expected type."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:361
#: ../doc/1.7/dev_guide/box_protocol.rst:333
msgid "DELETE: CODE - 0x05 Delete a tuple"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:364
#: ../doc/1.7/dev_guide/box_protocol.rst:336
msgid "DELETE BODY:\n"
"\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID |   0x20: KEY      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"                          MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:377
#: ../doc/1.7/dev_guide/box_protocol.rst:349
msgid "CALL_16: CODE - 0x06 Call a stored function, returning an array of tuples. This is deprecated; CALL (0x0a) is recommended instead."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:380
#: ../doc/1.7/dev_guide/box_protocol.rst:352
msgid "CALL_16 BODY:\n"
"\n"
"+=======================+==================+\n"
"|                       |                  |\n"
"|   0x22: FUNCTION_NAME |   0x21: TUPLE    |\n"
"| MP_INT: MP_STRING     | MP_INT: MP_ARRAY |\n"
"|                       |                  |\n"
"+=======================+==================+\n"
"                    MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:394
#: ../doc/1.7/dev_guide/box_protocol.rst:366
msgid "EVAL: CODE - 0x08 Evaulate Lua expression"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:397
#: ../doc/1.7/dev_guide/box_protocol.rst:369
msgid "EVAL BODY:\n"
"\n"
"+=======================+==================+\n"
"|                       |                  |\n"
"|   0x27: EXPRESSION    |   0x21: TUPLE    |\n"
"| MP_INT: MP_STRING     | MP_INT: MP_ARRAY |\n"
"|                       |                  |\n"
"+=======================+==================+\n"
"                    MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:410
#: ../doc/1.7/dev_guide/box_protocol.rst:382
msgid "UPSERT: CODE - 0x09 Update tuple if it would be found elsewhere try to insert tuple. Always use primary index for key."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:413
#: ../doc/1.7/dev_guide/box_protocol.rst:385
msgid "UPSERT BODY:\n"
"\n"
"+==================+==================+==========================+\n"
"|                  |                  |             +~~~~~~~~~~+ |\n"
"|                  |                  |             |          | |\n"
"|   0x10: SPACE_ID |   0x21: TUPLE    |       (OPS) |    OP    | |\n"
"| MP_INT: MP_INT   | MP_INT: MP_ARRAY |       0x28: |          | |\n"
"|                  |                  |     MP_INT: +~~~~~~~~~~+ |\n"
"|                  |                  |               MP_ARRAY   |\n"
"+==================+==================+==========================+\n"
"                                MP_MAP\n"
"\n"
"Operations structure same as for UPDATE operation.\n"
"   0           2\n"
"+-----------+==========+==========+\n"
"|           |          |          |\n"
"|    OP     | FIELD_NO | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  |\n"
"|           |          |          |\n"
"+-----------+==========+==========+\n"
"              MP_ARRAY\n"
"\n"
"Supported operations:\n"
"\n"
"'+' - add a value to a numeric field. If the filed is not numeric, it's\n"
"      changed to 0 first. If the field does not exist, the operation is\n"
"      skipped. There is no error in case of overflow either, the value\n"
"      simply wraps around in C style. The range of the integer is MsgPack:\n"
"      from -2^63 to 2^64-1\n"
"'-' - same as the previous, but subtract a value\n"
"'=' - assign a field to a value. The field must exist, if it does not exist,\n"
"      the operation is skipped.\n"
"'!' - insert a field. It's only possible to insert a field if this create no\n"
"      nil \"gaps\" between fields. E.g. it's possible to add a field between\n"
"      existing fields or as the last field of the tuple.\n"
"'#' - delete a field. If the field does not exist, the operation is skipped.\n"
"      It's not possible to change with update operations a part of the primary\n"
"      key (this is validated before performing upsert)."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:454
#: ../doc/1.7/dev_guide/box_protocol.rst:426
msgid "CALL: CODE - 0x0a Similar to CALL_16, but -- like EVAL, CALL returns a list of values, unconverted"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:457
#: ../doc/1.7/dev_guide/box_protocol.rst:429
msgid "CALL BODY:\n"
"\n"
"+=======================+==================+\n"
"|                       |                  |\n"
"|   0x22: FUNCTION_NAME |   0x21: TUPLE    |\n"
"| MP_INT: MP_STRING     | MP_INT: MP_ARRAY |\n"
"|                       |                  |\n"
"+=======================+==================+\n"
"                    MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:472
#: ../doc/1.7/dev_guide/box_protocol.rst:444
msgid "Response packet structure"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:474
#: ../doc/1.7/dev_guide/box_protocol.rst:446
msgid "We will show whole packets here:"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:476
#: ../doc/1.7/dev_guide/box_protocol.rst:448
msgid "OK:    LEN + HEADER + BODY\n"
"\n"
"0      5                                          OPTIONAL\n"
"+------++================+================++===================+\n"
"|      ||                |                ||                   |\n"
"| BODY ||   0x00: 0x00   |   0x01: SYNC   ||   0x30: DATA      |\n"
"|HEADER|| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT: MP_OBJECT |\n"
"| SIZE ||                |                ||                   |\n"
"+------++================+================++===================+\n"
" MP_INT                MP_MAP                      MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:490
#: ../doc/1.7/dev_guide/box_protocol.rst:462
msgid "Set of tuples in the response :code:`<data>` expects a msgpack array of tuples as value EVAL command returns arbitrary `MP_ARRAY` with arbitrary MsgPack values."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:493
#: ../doc/1.7/dev_guide/box_protocol.rst:465
msgid "ERROR: LEN + HEADER + BODY\n"
"\n"
"0      5\n"
"+------++================+================++===================+\n"
"|      ||                |                ||                   |\n"
"| BODY ||   0x00: 0x8XXX |   0x01: SYNC   ||   0x31: ERROR     |\n"
"|HEADER|| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT: MP_STRING |\n"
"| SIZE ||                |                ||                   |\n"
"+------++================+================++===================+\n"
" MP_INT                MP_MAP                      MP_MAP\n"
"\n"
"Where 0xXXX is ERRCODE."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:508
#: ../doc/1.7/dev_guide/box_protocol.rst:480
msgid "An error message is present in the response only if there is an error; :code:`<error>` expects as value a msgpack string."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:511
#: ../doc/1.7/dev_guide/box_protocol.rst:483
msgid "Convenience macros which define hexadecimal constants for return codes can be found in `src/box/errcode.h <https://github.com/tarantool/tarantool/blob/1.7/src/box/errcode.h>`_"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:517
#: ../doc/1.7/dev_guide/box_protocol.rst:489
msgid "Replication packet structure"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:519
#: ../doc/1.7/dev_guide/box_protocol.rst:491
msgid "-- replication keys\n"
"<server_id>     ::= 0x02\n"
"<lsn>           ::= 0x03\n"
"<timestamp>     ::= 0x04\n"
"<server_uuid>   ::= 0x24\n"
"<cluster_uuid>  ::= 0x25\n"
"<vclock>        ::= 0x26"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:529
#: ../doc/1.7/dev_guide/box_protocol.rst:501
msgid "-- replication codes\n"
"<join>      ::= 0x41\n"
"<subscribe> ::= 0x42"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:536
#: ../doc/1.7/dev_guide/box_protocol.rst:508
msgid "JOIN:\n"
"\n"
"In the beginning you must send initial JOIN\n"
"               HEADER                      BODY\n"
"+================+================++===================+\n"
"|                |                ||   SERVER_UUID     |\n"
"|   0x00: 0x41   |   0x01: SYNC   ||   0x24: UUID      |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT: MP_STRING |\n"
"|                |                ||                   |\n"
"+================+================++===================+\n"
"               MP_MAP                     MP_MAP\n"
"\n"
"Then instance, which we connect to, will send last SNAP file by, simply,\n"
"creating a number of INSERTs (with additional LSN and ServerID)\n"
"(don't reply). Then it'll send a vclock's MP_MAP and close a socket.\n"
"\n"
"+================+================++============================+\n"
"|                |                ||        +~~~~~~~~~~~~~~~~~+ |\n"
"|                |                ||        |                 | |\n"
"|   0x00: 0x00   |   0x01: SYNC   ||   0x26:| SRV_ID: SRV_LSN | |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT:| MP_INT: MP_INT  | |\n"
"|                |                ||        +~~~~~~~~~~~~~~~~~+ |\n"
"|                |                ||               MP_MAP       |\n"
"+================+================++============================+\n"
"               MP_MAP                      MP_MAP\n"
"\n"
"SUBSCRIBE:\n"
"\n"
"Then you must send SUBSCRIBE:\n"
"\n"
"                              HEADER\n"
"+===================+===================+\n"
"|                   |                   |\n"
"|     0x00: 0x41    |    0x01: SYNC     |\n"
"|   MP_INT: MP_INT  |  MP_INT: MP_INT   |\n"
"|                   |                   |\n"
"+===================+===================+\n"
"|    SERVER_UUID    |    CLUSTER_UUID   |\n"
"|   0x24: UUID      |   0x25: UUID      |\n"
"| MP_INT: MP_STRING | MP_INT: MP_STRING |\n"
"|                   |                   |\n"
"+===================+===================+\n"
"                 MP_MAP\n"
"\n"
"      BODY\n"
"+================+\n"
"|                |\n"
"|   0x26: VCLOCK |\n"
"| MP_INT: MP_INT |\n"
"|                |\n"
"+================+\n"
"      MP_MAP\n"
"\n"
"Then you must process every query that'll came through other masters.\n"
"Every request between masters will have Additional LSN and SERVER_ID."
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:596
#: ../doc/1.7/dev_guide/box_protocol.rst:568
msgid "XLOG / SNAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:598
#: ../doc/1.7/dev_guide/box_protocol.rst:570
msgid "XLOG and SNAP files have nearly the same format. The header looks like:"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:600
#: ../doc/1.7/dev_guide/box_protocol.rst:572
msgid "<type>\\n                  SNAP\\n or XLOG\\n\n"
"<version>\\n               currently 0.13\\n\n"
"Server: <server_uuid>\\n   where UUID is a 36-byte string\n"
"VClock: <vclock_map>\\n    e.g. {1: 0}\\n\n"
"\\n"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:608
#: ../doc/1.7/dev_guide/box_protocol.rst:580
msgid "After the file header come the data tuples. Tuples begin with a row marker ``0xd5ba0bab`` and the last tuple may be followed by an EOF marker ``0xd510aded``. Thus, between the file header and the EOF marker, there may be data tuples that have this form:"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:615
#: ../doc/1.7/dev_guide/box_protocol.rst:587
msgid "0            3 4                                         17\n"
"+-------------+========+============+===========+=========+\n"
"|             |        |            |           |         |\n"
"| 0xd5ba0bab  | LENGTH | CRC32 PREV | CRC32 CUR | PADDING |\n"
"|             |        |            |           |         |\n"
"+-------------+========+============+===========+=========+\n"
"  MP_FIXEXT2    MP_INT     MP_INT       MP_INT      ---\n"
"\n"
"+============+ +===================================+\n"
"|            | |                                   |\n"
"|   HEADER   | |                BODY               |\n"
"|            | |                                   |\n"
"+============+ +===================================+\n"
"    MP_MAP                     MP_MAP"
msgstr ""

#: ../doc/1.7/dev_guide/box_protocol.rst:632
#: ../doc/1.7/dev_guide/box_protocol.rst:604
msgid "See the example in the following section."
msgstr ""

#: ../doc/1.7/dev_guide/build_contribute_index.rst:31
msgid "Build and contribute"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:33
msgid "Building documentation"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:35
msgid "Tarantool documentation is built using a simplified markup system named ``Sphinx`` (see http://sphinx-doc.org). You can build a local version of this documentation and you can contribute to Tarantool's version."
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:39
msgid "You need to install these packages:"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:41
msgid "``git`` (a program for downloading source repositories)"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:42
msgid "``CMake`` version 2.8 or later (a program for managing the build process)"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:43
msgid "``Python`` version greater than 2.6 -- preferably 2.7 -- and less than 3.0 (Sphinx is a Python-based tool)"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:45
msgid "``LaTeX`` (a system for document preparation, the installable package name usually begins with the word texlive or tetex, on Ubuntu the name is texlive-latex-base)"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:49
msgid "You need to install these Python modules:"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:51
#: ../doc/1.7/dev_guide/building_from_source.rst:84
msgid "`pip <https://pypi.python.org/pypi/pip>`_, any version"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:52
msgid "`Sphinx <https://pypi.python.org/pypi/Sphinx>`_ version 1.4.4 or later"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:53
msgid "`sphinx-intl <https://pypi.python.org/pypi/sphinx-intl>`_ version 0.9.9"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:54
msgid "`lupa <https://pypi.python.org/pypi/lupa>`_ -- any version"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:56
msgid "See more details about installation in the :ref:`build-from-source <building_from_source>` section of this documentation."
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:59
msgid "Use ``git`` to download the latest source code of this documentation from the GitHub repository ``tarantool/doc``, branch 1.7. For example, to download to a local directory named ``~/tarantool-doc``:"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:63
msgid "git clone https://github.com/tarantool/doc.git ~/tarantool-doc"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:67
msgid "Use ``CMake`` to initiate the build."
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:69
msgid "cd ~/tarantool-doc\n"
"make clean         # unnecessary, added for good luck\n"
"rm CMakeCache.txt  # unnecessary, added for good luck\n"
"cmake .            # initiate"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:76
msgid "Build a local version of the documentation."
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:78
msgid "Run the ``make`` command with an appropriate option to specify which documentation version to build."
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:81
msgid "cd ~/tarantool-doc\n"
"make sphinx-html           # multi-page English version\n"
"make sphinx-singlehtml     # one-page English version\n"
"make sphinx-html-ru        # multi-page Russian version\n"
"make sphinx-singlehtml-ru  # one-page Russian version\n"
"make all                   # all versions plus the entire web-site"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:90
msgid "Documentation will be created in subdirectories of ``/output``:"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:92
msgid "``/output/en`` (files of the English version)"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:93
msgid "``/output/ru`` (files of the Russian version)"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:95
msgid "The entry point for each version is the ``index.html`` file in the appropriate directory."
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:98
msgid "Set up a web-server."
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:100
msgid "Run the following command to set up a web-server. The example below is for Ubuntu, but the procedure is similar for other supported operating systems. Make sure to run it from the documentation output folder, ``output/en`` or ``output/ru``, as in the example below:"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:105
msgid "cd ~/tarantool-doc/output/en\n"
"python -m SimpleHTTPServer 8000"
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:110
msgid "Open your browser and enter ``127.0.0.1:8000/doc/1.7`` into the address box. If your local documentation build is valid, the manual will appear in the browser."
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:113
msgid "To contribute to documentation, use the ``.rst`` format for drafting and submit your updates as a `pull request <https://help.github.com/articles/creating-a-pull-request/>`_ via GitHub."
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:118
msgid "To comply with the writing and formatting style, use the :ref:`guidelines <documentation_guidelines>` provided in the documentation, common sense and existing documents."
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:124
msgid "If you suggest creating a new documentation section (a whole new page), it has to be saved to the relevant section at GitHub."
msgstr ""

#: ../doc/1.7/dev_guide/building_documentation.rst:127
msgid "If you want to contribute to localizing this documentation (for example into Russian), add your translation strings to ``.po`` files stored in the corresponding locale directory (for example ``/locale/ru/LC_MESSAGES/`` for Russian). See more about localizing with Sphinx at http://www.sphinx-doc.org/en/stable/intl.html"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:33
msgid "Building from source"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:35
msgid "For downloading Tarantool source and building it, the platforms can differ and the preferences can differ. But the steps are always the same. Here in the manual we'll explain what the steps are, and after that you can look at some example scripts on the Internet."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:40
msgid "Get tools and libraries that will be necessary for building and testing."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:43
msgid "The absolutely necessary ones are:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:45
msgid "A program for downloading source repositories. |br| For all platforms, this is ``git``. It allows to download the latest complete set of source files from the Tarantool repository at GitHub."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:49
msgid "A C/C++ compiler. |br| Ordinarily, this is ``gcc`` and ``g++`` version 4.6 or later. On Mac OS X, this is ``Clang`` version 3.2 or later."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:52
msgid "A program for managing the build process. |br| For all platforms, this is ``CMake``. The CMake version should be 2.8 or later."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:55
msgid "Command-line interpreter for Python-based code (namely, for Tarantool test suite). |br| For all platforms, this is ``python``. The Python version should be greater than 2.6 -- preferably 2.7 -- and less than 3.0."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:59
msgid "Here are names of tools and libraries which may have to be installed in advance, using ``sudo apt-get`` (for Ubuntu), ``sudo yum install`` (for CentOS), or the equivalent on other platforms. Different platforms may use slightly different names. Ignore the ones marked `optional, only in Mac OS scripts` unless the platform is Mac OS."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:65
msgid "**gcc** and **g++**, or **clang** (see above)"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:66
msgid "**git** (see above)"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:67
msgid "**cmake** (see above)"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:68
msgid "**python** (see above; for test suite)"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:69
msgid "**libreadline-dev** or **libreadline6-dev** or **readline-devel** (for interactive mode)"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:71
msgid "**libssl-dev** (for :ref:`digest <digest>` module)"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:72
msgid "**libcurl4-gnutls-dev** or **libcurl4-openssl-dev** or **libcurl4-nss-dev** (for :ref:`http <http-module>` module)"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:74
msgid "**autoconf** (optional, only in Mac OS scripts)"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:75
msgid "**zlib1g** or **zlib** (optional, only in Mac OS scripts)"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:77
msgid "Set up Python modules for running the test suite."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:79
msgid "This step is optional. Python modules are not necessary for building Tarantool itself, unless you intend to use the \"Run the test suite\" option in step 7."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:82
msgid "You need the following Python modules:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:85
msgid "`dev <https://pypi.python.org/pypi/dev>`_, any version"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:86
msgid "`pyYAML <https://pypi.python.org/pypi/PyYAML>`_ version 3.10"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:87
msgid "`argparse <https://pypi.python.org/pypi/argparse>`_ version 1.1"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:88
msgid "`msgpack-python <https://pypi.python.org/pypi/msgpack-python>`_ version 0.4.6"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:89
msgid "`gevent <https://pypi.python.org/pypi/gevent>`_ version 1.1b5"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:90
msgid "`six <https://pypi.python.org/pypi/six>`_ version 1.8.0"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:92
msgid "On Ubuntu, you can get the modules from the repository:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:94
msgid "sudo apt-get install python-pip python-dev python-yaml <...>"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:98
msgid "On CentOS 6, you can likewise get the modules from the repository:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:100
msgid "sudo yum install python26 python26-PyYAML <...>"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:104
msgid "If some modules are not available on a repository, it is best to set up the modules by getting a tarball and doing the setup with ``python setup.py``, thus:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:108
msgid "# On some machines, this initial command may be necessary:\n"
"# wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\n"
"\n"
"# Python module for parsing YAML (pyYAML), for test suite:\n"
"# (If wget fails, check at http://pyyaml.org/wiki/PyYAML\n"
"# what the current version is.)\n"
"cd ~\n"
"wget http://pyyaml.org/download/pyyaml/PyYAML-3.10.tar.gz\n"
"tar -xzf PyYAML-3.10.tar.gz\n"
"cd PyYAML-3.10\n"
"sudo python setup.py install"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:122
msgid "Finally, use Python :code:`pip` to bring in Python packages that may not be up-to-date in the distro repositories. (On CentOS 7, it will be necessary to install ``pip`` first, with :code:`sudo yum install epel-release` followed by :code:`sudo yum install python-pip`.)"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:128
msgid "pip install tarantool\\>0.4 --user"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:132
msgid "Use ``git`` to download the latest Tarantool source code from the GitHub repository ``tarantool/tarantool``, branch 1.7. For example, to a local directory named `~/tarantool`:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:136
msgid "git clone https://github.com/tarantool/tarantool.git ~/tarantool"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:140
msgid "Use ``git`` again so that third-party contributions will be seen as well."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:142
msgid "The build depends on the following external libraries:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:144
msgid "Readline development files (``libreadline-dev/readline-devel`` package)."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:145
msgid "OpenSSL development files (``libssl-dev/openssl-devel`` package)."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:146
msgid "``libyaml`` (``libyaml-dev/libyaml-devel`` package)."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:147
msgid "``liblz4`` (``liblz4-dev/lz4-devel`` package)."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:148
msgid "GNU ``bfd`` which is the part of GNU ``binutils`` (``binutils-dev/binutils-devel`` package)."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:151
msgid "This step is only necessary once, the first time you do a download."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:153
msgid "cd ~/tarantool\n"
"git submodule init\n"
"git submodule update --recursive\n"
"cd ../"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:160
msgid "On rare occasions, the submodules will need to be updated again with the command:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:163
msgid "git submodule update --init --recursive"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:167
msgid "Note: There is an alternative -- to say ``git clone --recursive`` earlier in step 3, -- but we prefer the method above because it works with older versions of ``git``."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:171
msgid "Use CMake to initiate the build."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:173
msgid "cd ~/tarantool\n"
"make clean         # unnecessary, added for good luck\n"
"rm CMakeCache.txt  # unnecessary, added for good luck\n"
"cmake .            # start initiating with build type=Debug"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:180
msgid "On some platforms, it may be necessary to specify the C and C++ versions, for example:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:183
msgid "CC=gcc-4.8 CXX=g++-4.8 cmake ."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:187
msgid "The CMake option for specifying build type is :samp:`-DCMAKE_BUILD_TYPE={type}`, where :samp:`{type}` can be:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:190
msgid "``Debug`` -- used by project maintainers"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:191
msgid "``Release`` -- used only if the highest performance is required"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:192
msgid "``RelWithDebInfo`` -- used for production, also provides debugging capabilities"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:194
msgid "The CMake option for hinting that the result will be distributed is :code:`-DENABLE_DIST=ON`. If this option is on, then later ``make install`` will install tarantoolctl files in addition to tarantool files."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:198
msgid "Use ``make`` to complete the build."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:200
msgid "make"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:204
msgid "This creates the 'tarantool' executable in the directory `src/`"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:206
msgid "Next, it's highly recommended to say ``make install`` to install Tarantool to the `/usr/local` directory and keep your system clean. However, it is possible to run the Tarantool executable without installation."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:210
msgid "Run the test suite."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:212
msgid "This step is optional. Tarantool's developers always run the test suite before they publish new versions. You should run the test suite too, if you make any changes in the code. Assuming you downloaded to ``~/tarantool``, the principal steps are:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:217
msgid "# make a subdirectory named `bin`\n"
"mkdir ~/tarantool/bin\n"
"# link python to bin (this may require superuser privilege)\n"
"ln /usr/bin/python ~/tarantool/bin/python\n"
"# get on the test subdirectory\n"
"cd ~/tarantool/test\n"
"# run tests using python\n"
"PATH=~/tarantool/bin:$PATH ./test-run.py"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:228
msgid "The output should contain reassuring reports, for example:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:230
msgid "======================================================================\n"
"TEST                                            RESULT\n"
"------------------------------------------------------------\n"
"box/bad_trigger.test.py                         [ pass ]\n"
"box/call.test.py                                [ pass ]\n"
"box/iproto.test.py                              [ pass ]\n"
"box/xlog.test.py                                [ pass ]\n"
"box/admin.test.lua                              [ pass ]\n"
"box/auth_access.test.lua                        [ pass ]\n"
"... etc."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:243
msgid "To prevent later confusion, clean up what's in the `bin` subdirectory:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:245
msgid "rm ~/tarantool/bin/python\n"
"rmdir ~/tarantool/bin"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:250
msgid "Make an rpm package."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:252
msgid "This step is optional. It's only for people who want to redistribute Tarantool. Package maintainers who want to build with ``rpmbuild`` should consult the ``rpm-build`` instructions for the appropriate platform."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:256
msgid "Verify your Tarantool installation."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:258
msgid "tarantool $ ./src/tarantool"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:262
msgid "This will start Tarantool in the interactive mode."
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:264
msgid "For your added convenience, we provide OS-specific README files with example scripts at GitHub:"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:267
msgid "`README.FreeBSD <https://github.com/tarantool/tarantool/blob/1.7/README.FreeBSD>`_ for FreeBSD 10.1"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:269
msgid "`README.MacOSX <https://github.com/tarantool/tarantool/blob/1.7/README.MacOSX>`_ for Mac OS X `El Capitan`"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:271
msgid "`README.md <https://github.com/tarantool/tarantool/blob/1.7/README.md>`_ for generic GNU/Linux"
msgstr ""

#: ../doc/1.7/dev_guide/building_from_source.rst:273
msgid "These example scripts assume that the intent is to download from the 1.7 branch, build the server and run tests after build."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:31
msgid "C Style Guide"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:33
msgid "The project's coding style is based on a version of the Linux kernel coding style."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:35
msgid "The latest version of the Linux style can be found at: http://www.kernel.org/doc/Documentation/CodingStyle"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:38
msgid "Since it is open for changes, the version of style that we follow, one from 2007-July-13, will be also copied later in this document."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:41
msgid "There are a few additional guidelines, either unique to Tarantool or deviating from the Kernel guidelines."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:44
msgid "Chapters 10 \"Kconfig configuration files\", 11 \"Data structures\", 13 \"Printing kernel messages\", 14 \"Allocating memory\" and 17 \"Don't re-invent the kernel macros\" do not apply, since they are specific to Linux kernel programming environment."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:49
msgid "The rest of Linux Kernel Coding Style is amended as follows:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:53
msgid "General guidelines"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:55
msgid "We use Git for revision control. The latest development is happening in the 'master' branch. Our git repository is hosted on github, and can be checked out with git clone git://github.com/tarantool/tarantool.git # anonymous read-only access"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:59
msgid "If you have any questions about Tarantool internals, please post them on the developer discussion list, https://groups.google.com/forum/#!forum/tarantool. However, please be warned: Launchpad silently deletes posts from non-subscribed members, thus please be sure to have subscribed to the list prior to posting. Additionally, some engineers are always present on #tarantool channel on irc.freenode.net."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:67
msgid "Commenting style"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:69
msgid "Use Doxygen comment format, Javadoc flavor, i.e. `@tag` rather than `\\tag`. The main tags in use are @param, @retval, @return, @see, @note and @todo."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:72
msgid "Every function, except perhaps a very short and obvious one, should have a comment. A sample function comment may look like below:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:75
msgid "/** Write all data to a descriptor.\n"
" *\n"
" * This function is equivalent to 'write', except it would ensure\n"
" * that all data is written to the file unless a non-ignorable\n"
" * error occurs.\n"
" *\n"
" * @retval 0  Success\n"
" *\n"
" * @reval  1  An error occurred (not EINTR)\n"
" * /\n"
"static int\n"
"write_all(int fd, void \\*data, size_t len);"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:90
msgid "Public structures and important structure members should be commented as well."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:94
msgid "Header files"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:96
msgid "Use header guards. Put the header guard in the first line in the header, before the copyright or declarations. Use all-uppercase name for the header guard. Derive the header guard name from the file name, and append _INCLUDED to get a macro name. For example, core/log_io.h -> CORE_LOG_IO_H_INCLUDED. In ``.c`` (implementation) file, include the respective declaration header before all other headers, to ensure that the header is self- sufficient. Header \"header.h\" is self-sufficient if the following compiles without errors:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:104
msgid "#include \"header.h\""
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:110
msgid "Allocating memory"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:112
msgid "Prefer the supplied slab (salloc) and pool (palloc) allocators to malloc()/free() for any performance-intensive or large  memory allocations. Repetitive use of malloc()/free() can lead to memory fragmentation and should therefore be avoided."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:116
msgid "Always free all allocated memory, even allocated  at start-up. We aim at being valgrind leak-check clean, and in most cases it's just as easy to free() the allocated memory as it is to write a valgrind suppression. Freeing all allocated memory is also dynamic-load friendly: assuming a plug-in can be dynamically loaded and unloaded multiple times, reload should not lead to a memory leak."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:124
msgid "Other"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:126
msgid "Select GNU C99 extensions are acceptable. It's OK to mix declarations and statements, use true and false."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:129
msgid "The not-so-current list of all GCC C extensions can be found at: http://gcc.gnu.org/onlinedocs/gcc-4.3.5/gcc/C-Extensions.html"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:134
msgid "Linux kernel coding style"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:136
msgid "This is a short document describing the preferred coding style for the linux kernel.  Coding style is very personal, and I won't _force_ my views on anybody, but this is what goes for anything that I have to be able to maintain, and I'd prefer it for most other things too.  Please at least consider the points made here."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:142
msgid "First off, I'd suggest printing out a copy of the GNU coding standards, and NOT read it.  Burn them, it's a great symbolic gesture."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:145
msgid "Anyway, here goes:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:149
msgid "Chapter 1: Indentation"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:151
msgid "Tabs are 8 characters, and thus indentations are also 8 characters. There are heretic movements that try to make indentations 4 (or even 2!) characters deep, and that is akin to trying to define the value of PI to be 3."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:156
msgid "Rationale: The whole idea behind indentation is to clearly define where a block of control starts and ends.  Especially when you've been looking at your screen for 20 straight hours, you'll find it a lot easier to see how the indentation works if you have large indentations."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:161
msgid "Now, some people will claim that having 8-character indentations makes the code move too far to the right, and makes it hard to read on a 80-character terminal screen.  The answer to that is that if you need more than 3 levels of indentation, you're screwed anyway, and should fix your program."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:167
msgid "In short, 8-char indents make things easier to read, and have the added benefit of warning you when you're nesting your functions too deep. Heed that warning."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:171
msgid "The preferred way to ease multiple indentation levels in a switch statement is to align the \"switch\" and its subordinate \"case\" labels in the same column instead of \"double-indenting\" the \"case\" labels. e.g.:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:175
msgid "switch (suffix) {\n"
"case 'G':\n"
"case 'g':\n"
"    mem <<= 30;\n"
"    break;\n"
"case 'M':\n"
"case 'm':\n"
"    mem <<= 20;\n"
"    break;\n"
"case 'K':\n"
"case 'k':\n"
"    mem <<= 10;\n"
"    /* fall through */\n"
"default:\n"
"    break;\n"
"}"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:195
msgid "Don't put multiple statements on a single line unless you have something to hide:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:198
msgid "if (condition) do_this;\n"
"  do_something_everytime;"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:203
msgid "Don't put multiple assignments on a single line either. Kernel coding style is super simple. Avoid tricky expressions."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:206
msgid "Outside of comments, documentation and except in Kconfig, spaces are never used for indentation, and the above example is deliberately broken."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:209
msgid "Get a decent editor and don't leave whitespace at the end of lines."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:214
msgid "Chapter 2: Breaking long lines and strings"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:216
msgid "Coding style is all about readability and maintainability using commonly available tools."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:219
msgid "The limit on the length of lines is 80 columns and this is a strongly preferred limit."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:222
msgid "Statements longer than 80 columns will be broken into sensible chunks. Descendants are always substantially shorter than the parent and are placed substantially to the right. The same applies to function headers with a long argument list. Long strings are as well broken into shorter strings. The only exception to this is where exceeding 80 columns significantly increases readability and does not hide information."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:229
msgid "void fun(int a, int b, int c)\n"
"{\n"
"    if (condition)\n"
"        printk(KERN_WARNING \"Warning this is a long printk with \"\n"
"                        \"3 parameters a: %u b: %u \"\n"
"                        \"c: %u \\n\", a, b, c);\n"
"    else\n"
"        next_statement;\n"
"}"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:243
msgid "Chapter 3: Placing Braces and Spaces"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:245
msgid "The other issue that always comes up in C styling is the placement of braces.  Unlike the indent size, there are few technical reasons to choose one placement strategy over the other, but the preferred way, as shown to us by the prophets Kernighan and Ritchie, is to put the opening brace last on the line, and put the closing brace first, thusly:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:251
msgid "if (x is true) {\n"
"    we do y\n"
"}"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:257
msgid "This applies to all non-function statement blocks (if, switch, for, while, do). e.g.:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:260
msgid "switch (action) {\n"
"case KOBJ_ADD:\n"
"    return \"add\";\n"
"case KOBJ_REMOVE:\n"
"    return \"remove\";\n"
"case KOBJ_CHANGE:\n"
"    return \"change\";\n"
"default:\n"
"    return NULL;\n"
"}"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:273
msgid "However, there is one special case, namely functions: they have the opening brace at the beginning of the next line, thus:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:276
msgid "int function(int x)\n"
"{\n"
"    body of function;\n"
"}"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:283
msgid "Heretic people all over the world have claimed that this inconsistency is ...  well ...  inconsistent, but all right-thinking people know that (a) K&R are _right_ and (b) K&R are right.  Besides, functions are special anyway (you can't nest them in C)."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:288
msgid "Note that the closing brace is empty on a line of its own, _except_ in the cases where it is followed by a continuation of the same statement, ie a \"while\" in a do-statement or an \"else\" in an if-statement, like this:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:293
msgid "do {\n"
"    body of do-loop;\n"
"} while (condition);"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:299
msgid "and"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:301
msgid "if (x == y) {\n"
"    ..\n"
"} else if (x > y) {\n"
"    ...\n"
"} else {\n"
"    ....\n"
"}"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:311
msgid "Rationale: K&R."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:313
msgid "Also, note that this brace-placement also minimizes the number of empty (or almost empty) lines, without any loss of readability.  Thus, as the supply of new-lines on your screen is not a renewable resource (think 25-line terminal screens here), you have more empty lines to put comments on."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:319
msgid "Do not unnecessarily use braces where a single statement will do."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:321
msgid "if (condition)\n"
"    action();"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:326
msgid "This does not apply if one branch of a conditional statement is a single statement. Use braces in both branches."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:329
msgid "if (condition) {\n"
"    do_this();\n"
"    do_that();\n"
"} else {\n"
"    otherwise();\n"
"}"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:340
msgid "Chapter 3.1:  Spaces"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:342
msgid "Linux kernel style for use of spaces depends (mostly) on function-versus-keyword usage.  Use a space after (most) keywords.  The notable exceptions are sizeof, typeof, alignof, and __attribute__, which look somewhat like functions (and are usually used with parentheses in Linux, although they are not required in the language, as in: \"sizeof info\" after \"struct fileinfo info;\" is declared)."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:349
msgid "So use a space after these keywords: if, switch, case, for, do, while but not with sizeof, typeof, alignof, or __attribute__.  E.g.,"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:352
msgid "s = sizeof(struct file);"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:356
msgid "Do not add spaces around (inside) parenthesized expressions. This example is **bad**:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:359
msgid "s = sizeof( struct file );"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:363
msgid "When declaring pointer data or a function that returns a pointer type, the preferred use of '*' is adjacent to the data name or function name and not adjacent to the type name.  Examples:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:367
msgid "char *linux_banner;\n"
"unsigned long long memparse(char *ptr, char **retptr);\n"
"char *match_strdup(substring_t *s);"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:373
msgid "Use one space around (on each side of) most binary and ternary operators, such as any of these:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:376
msgid "=  +  -  <  >  *  /  %  |  &  ^  <=  >=  ==  !=  ?  :"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:378
msgid "but no space after unary operators:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:380
msgid "&  *  +  -  ~  !  sizeof  typeof  alignof  __attribute__  defined"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:382
msgid "no space before the postfix increment & decrement unary operators:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:384
#: ../doc/1.7/dev_guide/c_style_guide.rst:388
msgid "++  --"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:386
msgid "no space after the prefix increment & decrement unary operators:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:390
msgid "and no space around the '.' and \"->\" structure member operators."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:392
msgid "Do not leave trailing whitespace at the ends of lines.  Some editors with \"smart\" indentation will insert whitespace at the beginning of new lines as appropriate, so you can start typing the next line of code right away. However, some such editors do not remove the whitespace if you end up not putting a line of code there, such as if you leave a blank line.  As a result, you end up with lines containing trailing whitespace."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:399
msgid "Git will warn you about patches that introduce trailing whitespace, and can optionally strip the trailing whitespace for you; however, if applying a series of patches, this may make later patches in the series fail by changing their context lines."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:407
msgid "Chapter 4: Naming"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:409
msgid "C is a Spartan language, and so should your naming be.  Unlike Modula-2 and Pascal programmers, C programmers do not use cute names like ThisVariableIsATemporaryCounter.  A C programmer would call that variable \"tmp\", which is much easier to write, and not the least more difficult to understand."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:415
msgid "HOWEVER, while mixed-case names are frowned upon, descriptive names for global variables are a must.  To call a global function \"foo\" is a shooting offense."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:419
msgid "GLOBAL variables (to be used only if you _really_ need them) need to have descriptive names, as do global functions.  If you have a function that counts the number of active users, you should call that \"count_active_users()\" or similar, you should _not_ call it \"cntusr()\"."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:424
msgid "Encoding the type of a function into the name (so-called Hungarian notation) is brain damaged - the compiler knows the types anyway and can check those, and it only confuses the programmer.  No wonder MicroSoft makes buggy programs."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:429
msgid "LOCAL variable names should be short, and to the point.  If you have some random integer loop counter, it should probably be called \"i\". Calling it \"loop_counter\" is non-productive, if there is no chance of it being mis-understood.  Similarly, \"tmp\" can be just about any type of variable that is used to hold a temporary value."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:435
msgid "If you are afraid to mix up your local variable names, you have another problem, which is called the function-growth-hormone-imbalance syndrome. See chapter 6 (Functions)."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:442
msgid "Chapter 5: Typedefs"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:444
msgid "Please don't use things like \"vps_t\"."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:446
msgid "It's a _mistake_ to use typedef for structures and pointers. When you see a"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:448
msgid "vps_t a;"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:452
msgid "in the source, what does it mean?"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:454
msgid "In contrast, if it says"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:456
msgid "struct virtual_container *a;"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:460
msgid "you can actually tell what \"a\" is."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:462
msgid "Lots of people think that typedefs \"help readability\". Not so. They are useful only for:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:465
msgid "totally opaque objects (where the typedef is actively used to _hide_ what the object is)."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:468
msgid "Example: \"pte_t\" etc. opaque objects that you can only access using the proper accessor functions."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:471
msgid "NOTE! Opaqueness and \"accessor functions\" are not good in themselves. The reason we have them for things like pte_t etc. is that there really is absolutely _zero_ portably accessible information there."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:475
msgid "Clear integer types, where the abstraction _helps_ avoid confusion whether it is \"int\" or \"long\"."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:478
msgid "u8/u16/u32 are perfectly fine typedefs, although they fit into category (d) better than here."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:481
msgid "NOTE! Again - there needs to be a _reason_ for this. If something is \"unsigned long\", then there's no reason to do"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:484
msgid "typedef unsigned long myflags_t;"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:488
msgid "but if there is a clear reason for why it under certain circumstances might be an \"unsigned int\" and under other configurations might be \"unsigned long\", then by all means go ahead and use a typedef."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:492
msgid "when you use sparse to literally create a _new_ type for type-checking."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:495
msgid "New types which are identical to standard C99 types, in certain exceptional circumstances."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:498
msgid "Although it would only take a short amount of time for the eyes and brain to become accustomed to the standard types like 'uint32_t', some people object to their use anyway."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:502
msgid "Therefore, the Linux-specific 'u8/u16/u32/u64' types and their signed equivalents which are identical to standard types are permitted -- although they are not mandatory in new code of your own."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:507
msgid "When editing existing code which already uses one or the other set of types, you should conform to the existing choices in that code."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:510
msgid "Types safe for use in userspace."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:512
msgid "In certain structures which are visible to userspace, we cannot require C99 types and cannot use the 'u32' form above. Thus, we use __u32 and similar types in all structures which are shared with userspace."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:517
msgid "Maybe there are other cases too, but the rule should basically be to NEVER EVER use a typedef unless you can clearly match one of those rules."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:520
msgid "In general, a pointer, or a struct that has elements that can reasonably be directly accessed should **never** be a typedef."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:526
msgid "Chapter 6: Functions"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:528
msgid "Functions should be short and sweet, and do just one thing.  They should fit on one or two screenfuls of text (the ISO/ANSI screen size is 80x24, as we all know), and do one thing and do that well."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:532
msgid "The maximum length of a function is inversely proportional to the complexity and indentation level of that function.  So, if you have a conceptually simple function that is just one long (but simple) case-statement, where you have to do lots of small things for a lot of different cases, it's OK to have a longer function."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:538
msgid "However, if you have a complex function, and you suspect that a less-than-gifted first-year high-school student might not even understand what the function is all about, you should adhere to the maximum limits all the more closely.  Use helper functions with descriptive names (you can ask the compiler to in-line them if you think it's performance-critical, and it will probably do a better job of it than you would have done)."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:546
msgid "Another measure of the function is the number of local variables.  They shouldn't exceed 5-10, or you're doing something wrong.  Re-think the function, and split it into smaller pieces.  A human brain can generally easily keep track of about 7 different things, anything more and it gets confu/sed.  You know you're brilliant, but maybe you'd like to understand what you did 2 weeks from now."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:553
msgid "In source files, separate functions with one blank line.  If the function is exported, the EXPORT* macro for it should follow immediately after the closing function brace line.  E.g.:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:557
msgid "int system_is_up(void)\n"
"{\n"
"    return system_state == SYSTEM_RUNNING;\n"
"}\n"
"EXPORT_SYMBOL(system_is_up);"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:565
msgid "In function prototypes, include parameter names with their data types. Although this is not required by the C language, it is preferred in Linux because it is a simple way to add valuable information for the reader."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:571
msgid "Chapter 7: Centralized exiting of functions"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:573
msgid "Albeit deprecated by some people, the equivalent of the goto statement is used frequently by compilers in form of the unconditional jump instruction."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:576
msgid "The goto statement comes in handy when a function exits from multiple locations and some common work such as cleanup has to be done."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:579
msgid "The rationale is:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:581
msgid "unconditional statements are easier to understand and follow"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:582
msgid "nesting is reduced"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:583
msgid "errors by not updating individual exit points when making modifications are prevented"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:585
msgid "saves the compiler work to optimize redundant code away ;)"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:587
msgid "int fun(int a)\n"
"{\n"
"    int result = 0;\n"
"    char *buffer = kmalloc(SIZE);\n"
"\n"
"    if (buffer == NULL)\n"
"        return -ENOMEM;\n"
"\n"
"    if (condition1) {\n"
"        while (loop1) {\n"
"            ...\n"
"        }\n"
"        result = 1;\n"
"        goto out;\n"
"    }\n"
"    ...\n"
"out:\n"
"    kfree(buffer);\n"
"    return result;\n"
"}"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:612
msgid "Chapter 8: Commenting"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:614
msgid "Comments are good, but there is also a danger of over-commenting. NEVER try to explain HOW your code works in a comment: it's much better to write the code so that the _working_ is obvious, and it's a waste of time to explain badly written code. с Generally, you want your comments to tell WHAT your code does, not HOW. Also, try to avoid putting comments inside a function body: if the function is so complex that you need to separately comment parts of it, you should probably go back to chapter 6 for a while.  You can make small comments to note or warn about something particularly clever (or ugly), but try to avoid excess.  Instead, put the comments at the head of the function, telling people what it does, and possibly WHY it does it."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:628
msgid "When commenting the kernel API functions, please use the kernel-doc format. See the files Documentation/kernel-doc-nano-HOWTO.txt and scripts/kernel-doc for details."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:632
msgid "Linux style for comments is the C89 ``\"/\\* ... \\*/\"`` style. Don't use C99-style ``\"// ...\"`` comments."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:635
msgid "The preferred style for long (multi-line) comments is:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:637
msgid "/*\n"
" * This is the preferred style for multi-line\n"
" * comments in the Linux kernel source code.\n"
" * Please use it consistently.\n"
" *\n"
" * Description:  A column of asterisks on the left side,\n"
" * with beginning and ending almost-blank lines.\n"
" */"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:648
msgid "It's also important to comment data, whether they are basic types or derived types.  To this end, use just one data declaration per line (no commas for multiple data declarations).  This leaves you room for a small comment on each item, explaining its use."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:655
msgid "Chapter 9: You've made a mess of it"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:657
msgid "That's OK, we all do.  You've probably been told by your long-time Unix user helper that \"GNU emacs\" automatically formats the C sources for you, and you've noticed that yes, it does do that, but the defaults it uses are less than desirable (in fact, they are worse than random typing - an infinite number of monkeys typing into GNU emacs would never make a good program)."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:664
msgid "So, you can either get rid of GNU emacs, or change it to use saner values.  To do the latter, you can stick the following in your .emacs file:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:667
msgid "(defun c-lineup-arglist-tabs-only (ignored)\n"
"\"Line up argument lists by tabs, not spaces\"\n"
"(let* ((anchor (c-langelem-pos c-syntactic-element))\n"
"    (column (c-langelem-2nd-pos c-syntactic-element))\n"
"    (offset (- (1+ column) anchor))\n"
"    (steps (floor offset c-basic-offset)))\n"
"    (* (max steps 1)\n"
"    c-basic-offset)))\n"
"\n"
"(add-hook 'c-mode-common-hook\n"
"        (lambda ()\n"
"            ;; Add kernel style\n"
"            (c-add-style\n"
"            \"linux-tabs-only\"\n"
"            '(\"linux\" (c-offsets-alist\n"
"                        (arglist-cont-nonempty\n"
"                        c-lineup-gcc-asm-reg\n"
"                        c-lineup-arglist-tabs-only))))))\n"
"\n"
"(add-hook 'c-mode-hook\n"
"        (lambda ()\n"
"            (let ((filename (buffer-file-name)))\n"
"            ;; Enable kernel mode for the appropriate files\n"
"            (when (and filename\n"
"                        (string-match (expand-file-name \"~/src/linux-trees\")\n"
"                                    filename))\n"
"                (setq indent-tabs-mode t)\n"
"                (c-set-style \"linux-tabs-only\")))))"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:698
msgid "This will make emacs go better with the kernel coding style for C files below ~/src/linux-trees."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:701
msgid "But even if you fail in getting emacs to do sane formatting, not everything is lost: use \"indent\"."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:704
msgid "Now, again, GNU indent has the same brain-dead settings that GNU emacs has, which is why you need to give it a few command line options. However, that's not too bad, because even the makers of GNU indent recognize the authority of K&R (the GNU people aren't evil, they are just severely misguided in this matter), so you just give indent the options \"-kr -i8\" (stands for \"K&R, 8 character indents\"), or use \"scripts/Lindent\", which indents in the latest style."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:712
msgid "\"indent\" has a lot of options, and especially when it comes to comment re-formatting you may want to take a look at the man page.  But remember: \"indent\" is not a fix for bad programming."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:719
msgid "Chapter 10: Kconfig configuration files"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:721
msgid "For all of the Kconfig* configuration files throughout the source tree, the indentation is somewhat different.  Lines under a \"config\" definition are indented with one tab, while help text is indented an additional two spaces. Example:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:726
msgid "config AUDIT\n"
"    bool \"Auditing support\"\n"
"    depends on NET\n"
"    help\n"
"    Enable auditing infrastructure that can be used with another\n"
"    kernel subsystem, such as SELinux (which requires this for\n"
"    logging of avc messages output).  Does not do system-call\n"
"    auditing without CONFIG_AUDITSYSCALL."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:737
msgid "Features that might still be considered unstable should be defined as dependent on \"EXPERIMENTAL\":"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:740
msgid "config SLUB\n"
"    depends on EXPERIMENTAL && !ARCH_USES_SLAB_PAGE_STRUCT\n"
"    bool \"SLUB (Unqueued Allocator)\"\n"
"    ..."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:747
msgid "while seriously dangerous features (such as write support for certain filesystems) should advertise this prominently in their prompt string:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:750
msgid "config ADFS_FS_RW\n"
"    bool \"ADFS write support (DANGEROUS)\"\n"
"    depends on ADFS_FS\n"
"    ..."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:757
msgid "For full documentation on the configuration files, see the file Documentation/kbuild/kconfig-language.txt."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:763
msgid "Chapter 11: Data structures"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:765
msgid "Data structures that have visibility outside the single-threaded environment they are created and destroyed in should always have reference counts.  In the kernel, garbage collection doesn't exist (and outside the kernel garbage collection is slow and inefficient), which means that you absolutely _have_ to reference count all your uses."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:771
msgid "Reference counting means that you can avoid locking, and allows multiple users to have access to the data structure in parallel - and not having to worry about the structure suddenly going away from under them just because they slept or did something else for a while."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:776
msgid "Note that locking is _not_ a replacement for reference counting. Locking is used to keep data structures coherent, while reference counting is a memory management technique.  Usually both are needed, and they are not to be confused with each other."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:781
msgid "Many data structures can indeed have two levels of reference counting, when there are users of different \"classes\".  The subclass count counts the number of subclass users, and decrements the global count just once when the subclass count goes to zero."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:786
msgid "Examples of this kind of \"multi-level-reference-counting\" can be found in memory management (\"struct mm_struct\": mm_users and mm_count), and in filesystem code (\"struct super_block\": s_count and s_active)."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:790
msgid "Remember: if another thread can find your data structure, and you don't have a reference count on it, you almost certainly have a bug."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:795
msgid "Chapter 12: Macros, Enums and RTL"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:797
msgid "Names of macros defining constants and labels in enums are capitalized."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:799
msgid "#define CONSTANT 0x12345"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:803
msgid "Enums are preferred when defining several related constants."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:805
msgid "CAPITALIZED macro names are appreciated but macros resembling functions may be named in lower case."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:808
msgid "Generally, inline functions are preferable to macros resembling functions."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:810
msgid "Macros with multiple statements should be enclosed in a do - while block:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:812
msgid "#define macrofun(a, b, c)   \\\n"
"    do {                    \\\n"
"        if (a == 5)         \\\n"
"            do_this(b, c);  \\\n"
"    } while (0)"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:820
msgid "Things to avoid when using macros:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:822
msgid "macros that affect control flow:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:824
msgid "#define FOO(x)                  \\\n"
"    do {                        \\\n"
"        if (blah(x) < 0)        \\\n"
"            return -EBUGGERED;  \\\n"
"    } while(0)"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:832
msgid "is a _very_ bad idea.  It looks like a function call but exits the \"calling\" function; don't break the internal parsers of those who will read the code."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:835
msgid "macros that depend on having a local variable with a magic name:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:837
msgid "#define FOO(val) bar(index, val)"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:841
msgid "might look like a good thing, but it's confusing as hell when one reads the code and it's prone to breakage from seemingly innocent changes."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:844
msgid "macros with arguments that are used as l-values: FOO(x) = y; will bite you if somebody e.g. turns FOO into an inline function."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:847
msgid "forgetting about precedence: macros defining constants using expressions must enclose the expression in parentheses. Beware of similar issues with macros using parameters."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:851
msgid "#define CONSTANT 0x4000\n"
"#define CONSTEXP (CONSTANT | 3)"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:856
msgid "The cpp manual deals with macros exhaustively. The gcc internals manual also covers RTL which is used frequently with assembly language in the kernel."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:861
msgid "Chapter 13: Printing kernel messages"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:863
msgid "Kernel developers like to be seen as literate. Do mind the spelling of kernel messages to make a good impression. Do not use crippled words like \"dont\"; use \"do not\" or \"don't\" instead.  Make the messages concise, clear, and unambiguous."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:868
msgid "Kernel messages do not have to be terminated with a period."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:870
msgid "Printing numbers in parentheses (%d) adds no value and should be avoided."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:872
msgid "There are a number of driver model diagnostic macros in <linux/device.h> which you should use to make sure messages are matched to the right device and driver, and are tagged with the right level:  dev_err(), dev_warn(), dev_info(), and so forth.  For messages that aren't associated with a particular device, <linux/kernel.h> defines pr_debug() and pr_info()."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:878
msgid "Coming up with good debugging messages can be quite a challenge; and once you have them, they can be a huge help for remote troubleshooting.  Such messages should be compiled out when the DEBUG symbol is not defined (that is, by default they are not included).  When you use dev_dbg() or pr_debug(), that's automatic.  Many subsystems have Kconfig options to turn on -DDEBUG. A related convention uses VERBOSE_DEBUG to add dev_vdbg() messages to the ones already enabled by DEBUG."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:888
msgid "Chapter 14: Allocating memory"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:890
msgid "The kernel provides the following general purpose memory allocators: kmalloc(), kzalloc(), kcalloc(), and vmalloc().  Please refer to the API documentation for further information about them."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:894
msgid "The preferred form for passing a size of a struct is the following:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:896
msgid "p = kmalloc(sizeof(*p), ...);"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:900
msgid "The alternative form where struct name is spelled out hurts readability and introduces an opportunity for a bug when the pointer variable type is changed but the corresponding sizeof that is passed to a memory allocator is not."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:904
msgid "Casting the return value which is a void pointer is redundant. The conversion from void pointer to any other pointer type is guaranteed by the C programming language."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:910
msgid "Chapter 15: The inline disease"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:912
msgid "There appears to be a common misperception that gcc has a magic \"make me faster\" speedup option called \"inline\". While the use of inlines can be appropriate (for example as a means of replacing macros, see Chapter 12), it very often is not. Abundant use of the inline keyword leads to a much bigger kernel, which in turn slows the system as a whole down, due to a bigger icache footprint for the CPU and simply because there is less memory available for the pagecache. Just think about it; a pagecache miss causes a disk seek, which easily takes 5 milliseconds. There are a LOT of cpu cycles that can go into these 5 milliseconds."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:922
msgid "A reasonable rule of thumb is to not put inline at functions that have more than 3 lines of code in them. An exception to this rule are the cases where a parameter is known to be a compiletime constant, and as a result of this constantness you *know* the compiler will be able to optimize most of your function away at compile time. For a good example of this later case, see the kmalloc() inline function."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:929
msgid "Often people argue that adding inline to functions that are static and used only once is always a win since there is no space tradeoff. While this is technically correct, gcc is capable of inlining these automatically without help, and the maintenance issue of removing the inline when a second user appears outweighs the potential value of the hint that tells gcc to do something it would have done anyway."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:938
msgid "Chapter 16: Function return values and names"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:940
msgid "Functions can return values of many different kinds, and one of the most common is a value indicating whether the function succeeded or failed.  Such a value can be represented as an error-code integer (-Exxx = failure, 0 = success) or a \"succeeded\" boolean (0 = failure, non-zero = success)."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:946
msgid "Mixing up these two sorts of representations is a fertile source of difficult-to-find bugs.  If the C language included a strong distinction between integers and booleans then the compiler would find these mistakes for us... but it doesn't.  To help prevent such bugs, always follow this convention:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:954
msgid "If the name of a function is an action or an imperative command,\n"
"the function should return an error-code integer.  If the name\n"
"is a predicate, the function should return a \"succeeded\" boolean."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:958
msgid "For example, \"add work\" is a command, and the add_work() function returns 0 for success or -EBUSY for failure.  In the same way, \"PCI device present\" is a predicate, and the pci_dev_present() function returns 1 if it succeeds in finding a matching device or 0 if it doesn't."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:963
msgid "All EXPORTed functions must respect this convention, and so should all public functions.  Private (static) functions need not, but it is recommended that they do."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:967
msgid "Functions whose return value is the actual result of a computation, rather than an indication of whether the computation succeeded, are not subject to this rule.  Generally they indicate failure by returning some out-of-range result.  Typical examples would be functions that return pointers; they use NULL or the ERR_PTR mechanism to report failure."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:976
msgid "Chapter 17:  Don't re-invent the kernel macros"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:978
msgid "The header file include/linux/kernel.h contains a number of macros that you should use, rather than explicitly coding some variant of them yourself. For example, if you need to calculate the length of an array, take advantage of the macro"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:983
msgid "#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:987
msgid "Similarly, if you need to calculate the size of some structure member, use"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:989
msgid "#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:993
msgid "There are also min() and max() macros that do strict type checking if you need them.  Feel free to peruse that header file to see what else is already defined that you shouldn't reproduce in your code."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:999
msgid "Chapter 18:  Editor modelines and other cruft"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1001
msgid "Some editors can interpret configuration information embedded in source files, indicated with special markers.  For example, emacs interprets lines marked like this:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1005
msgid "-*- mode: c -*-"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1009
msgid "Or like this:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1011
msgid "/*\n"
"Local Variables:\n"
"compile-command: \"gcc -DMAGIC_DEBUG_FLAG foo.c\"\n"
"End:\n"
"*/"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1019
msgid "Vim interprets markers that look like this:"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1021
msgid "/* vim:set sw=8 noet */"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1025
msgid "Do not include any of these in source files.  People have their own personal editor configurations, and your source files should not override them.  This includes markers for indentation and mode configuration.  People may use their own custom mode, or may have some other magic method for making indentation work correctly."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1033
msgid "Appendix I: References"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1035
msgid "`The C Programming Language, Second Edition <https://en.wikipedia.org/wiki/The_C_Programming_Language>`_ by Brian W. Kernighan and Dennis M. Ritchie. |br| Prentice Hall, Inc., 1988. |br| ISBN 0-13-110362-8 (paperback), 0-13-110370-9 (hardback)."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1040
msgid "`The Practice of Programming <https://en.wikipedia.org/wiki/The_Practice_of_Programming>`_ by Brian W. Kernighan and Rob Pike. |br| Addison-Wesley, Inc., 1999. |br| ISBN 0-201-61586-X."
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1045
msgid "`GNU manuals <http://www.gnu.org/manual/>`_ - where in compliance with K&R and this text - for **cpp**, **gcc**, **gcc internals** and **indent**"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1048
msgid "`WG14 International standardization workgroup for the programming language C <http://www.open-std.org/JTC1/SC22/WG14/>`_"
msgstr ""

#: ../doc/1.7/dev_guide/c_style_guide.rst:1051
msgid "`Kernel CodingStyle, by greg@kroah.com at OLS 2002 <http://www.kroah.com/linux/talks/ols_2002_kernel_codingstyle_talk/html/>`_"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:31
msgid "Developer guidelines"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:37
msgid "How to work on a bug"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:39
msgid "Any defect, even minor, if it changes the user-visible server behavior, needs a bug report. Report a bug at http://github.com/tarantool/tarantool/issues."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:42
msgid "When reporting a bug, try to come up with a test case right away. Set the current maintenance milestone for the bug fix, and specify the series. Assign the bug to yourself. Put the status to 'In progress' Once the patch is ready, put the bug the bug to 'In review' and solicit a review for the fix."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:47
msgid "Once there is a positive code review, push the patch and set the status to 'Closed'"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:49
msgid "Patches for bugs should contain a reference to the respective Launchpad bug page or at least bug id. Each patch should have a test, unless coming up with one is difficult in the current framework, in which case QA should be alerted."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:53
msgid "There are two things you need to do when your patch makes it into the master:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:55
msgid "put the bug to 'fix committed',"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:56
msgid "delete the remote branch."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:62
msgid "How to write a commit message"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:64
msgid "Any commit needs a helpful message. Mind the following guidelines when committing to any of Tarantool repositories at GitHub."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:67
msgid "Separate subject from body with a blank line."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:68
msgid "Try to limit the subject line to **50 characters** or so."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:69
msgid "Start the subject line with a capital letter unless it prefixed with a subsystem name and semicolon:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:72
msgid "memtx:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:73
msgid "vinyl:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:74
msgid "xlog:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:75
msgid "replication:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:76
msgid "recovery:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:77
msgid "iproto:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:78
msgid "net.box:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:79
msgid "lua:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:81
msgid "Do not end the subject line with a period."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:82
msgid "Do not put \"gh-xx\", \"closes #xxx\" to the subject line."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:83
msgid "Use the imperative mood in the subject line. A properly formed Git commit subject line should always be able to complete the following sentence: \"If applied, this commit will */your subject line here/*\"."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:86
msgid "Wrap the body to **72 characters** or so."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:87
msgid "Use the body to explain **what and why** vs. how."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:88
msgid "Link GitHub issues on the lasts lines (`see how <https://help.github.com/articles/closing-issues-via-commit-messages>`_)."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:90
msgid "Use your real name and real email address. For Tarantool team members, **@tarantool.org** email is preferred, but not mandatory."
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:94
msgid "A template:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:96
msgid "Summarize changes in 50 characters or less\n"
"\n"
"More detailed explanatory text, if necessary.\n"
"Wrap it to 72 characters or so.\n"
"In some contexts, the first line is treated as the subject of the\n"
"commit, and the rest of the text as the body.\n"
"The blank line separating the summary from the body is critical\n"
"(unless you omit the body entirely); various tools like `log`,\n"
"`shortlog` and `rebase` can get confused if you run the two together.\n"
"\n"
"Explain the problem that this commit is solving. Focus on why you\n"
"are making this change as opposed to how (the code explains that).\n"
"Are there side effects or other unintuitive consequences of this\n"
"change? Here's the place to explain them.\n"
"\n"
"Further paragraphs come after blank lines.\n"
"\n"
"- Bullet points are okay, too.\n"
"\n"
"- Typically a hyphen or asterisk is used for the bullet, preceded\n"
"  by a single space, with blank lines in between, but conventions\n"
"  vary here.\n"
"\n"
"Fixes: #123\n"
"Closes: #456\n"
"Needed for: #859\n"
"See also: #343, #789"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:126
msgid "Some real-world examples:"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:128
msgid "`tarantool/tarantool@2993a75 <https://github.com/tarantool/tarantool/commit/2993a75858352f101deb4a15cefd497ae6a78cf7>`_"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:129
msgid "`tarantool/tarantool@ccacba2 <https://github.com/tarantool/tarantool/commit/ccacba28f813fb99fd9eaf07fb41bf604dd341bc>`_"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:130
msgid "`tarantool/tarantool@386df3d <https://github.com/tarantool/tarantool/commit/386df3d3eb9c5239fc83fd4dd3292d1b49446b89>`_"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:131
msgid "`tarantool/tarantool@076a842 <https://github.com/tarantool/tarantool/commit/076a842011e09c84c25fb5e68f1b23c9917a3750>`_"
msgstr ""

#: ../doc/1.7/dev_guide/developer_guidelines.rst:133
msgid "Based on [1_] and [2_]."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:33
msgid "Documentation guidelines"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:35
msgid "These guidelines are updated on the on-demand basis, covering only those issues that cause pains to the existing writers. At this point, we do not aim to come up with an exhaustive Documentation Style Guide for the Tarantool project."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:41
msgid "Markup issues"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:45
msgid "Wrapping text"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:47
msgid "The limit is 80 characters per line for plain text, and no limit for any other constructions when wrapping affects ReST readability and/or HTML output. Also, it makes no sense to wrap text into lines shorter than 80 characters unless you have a good reason to do so."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:52
msgid "The 80-character limit comes from the ISO/ANSI 80x24 screen resolution, and it's unlikely that readers/writers will use 80-character consoles. Yet it's still a standard for many coding guidelines (including Tarantool). As for writers, the benefit is that an 80-character page guide allows keeping the text window rather narrow most of the time, leaving more space for other applications in a wide-screen environment."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:61
msgid "Formatting code snippets"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:63
msgid "For code snippets, we mainly use the ``code-block`` directive with an appropriate highlighting language. The most commonly used highlighting languages are:"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:67
msgid "``.. code-block:: tarantoolsession``"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:68
msgid "``.. code-block:: console``"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:69
msgid "``.. code-block:: lua``"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:71
msgid "For example (a code snippet in Lua):"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:73
msgid "for page in paged_iter(\"X\", 10) do\n"
"  print(\"New Page. Number Of Tuples = \" .. #page)\n"
"  for i=1,#page,1 do print(page[i]) end\n"
"end"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:80
msgid "In rare cases, when we need custom highlight for specific parts of a code snippet and the ``code-block`` directive is not enough, we use the per-line ``codenormal`` directive together and explicit output formatting (defined in :file:`doc/sphinx/_static/sphinx_design.css`)."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:85
msgid "Examples:"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:87
msgid "Function syntax (the placeholder `space-name` is displayed in italics):"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:89
msgid ":codenormal:`box.space.`:codeitalic:`space-name`:codenormal:`:create_index('index-name')`"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:91
msgid "A tdb session (user input is in bold, command prompt is in blue, computer output is in green):"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:103
msgid "Warning: Every entry of explicit output formatting (``codenormal``, ``codebold``, etc) tends to cause troubles when this documentation is translated to other languages. Please avoid using explicit output formatting unless it is REALLY needed."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:110
msgid "Using separated links"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:112
msgid "Avoid separating the link and the target definition (ref), like this:"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:114
msgid "This is a paragraph that contains `a link`_.\n"
"\n"
".. _a link: http://example.com/"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:120
msgid "Use non-separated links instead:"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:122
msgid "This is a paragraph that contains `a link <http://example.com/>`_."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:126
msgid "Warning: Every separated link tends to cause troubles when this documentation is translated to other languages. Please avoid using separated links unless it is REALLY needed (e.g. in tables)."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:132
msgid "Creating labels for local links"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:134
msgid "We avoid using links that sphinx generates automatically for most objects. Instead, we add our own labels for linking to any place in this documentation."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:137
msgid "Our naming convention is as follows:"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:139
msgid "Character set: a through z, 0 through 9, dash, underscore."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:141
msgid "Format: ``path dash filename dash tag``"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:143
msgid "Example: ``_c_api-box_index-iterator_type`` |br| where: |br| ``c_api`` is the directory name, |br| ``box_index`` is the file name (without \".rst\"), and |br| ``iterator_type`` is the tag."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:149
msgid "The file name is useful for knowing, when you see \"ref\", where it is pointing to. And if the file name is meaningful, you see that better."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:152
msgid "The file name alone, without a path, is enough when the file name is unique within ``doc/sphinx``. So, for ``fiber.rst`` it should be just \"fiber\", not \"reference-fiber\". While for \"index.rst\" (we have a handful of \"index.rst\" in different directories) please specify the path before the file name, e.g. \"reference-index\"."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:159
msgid "Use a dash \"-\" to delimit the path and the file name. In the documentation source, we use only underscores \"_\" in paths and file names, reserving dash \"-\" as the delimiter for local links."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:163
msgid "The tag can be anything meaningful. The only guideline is for Tarantool syntax items (such as members), where the preferred tag syntax is ``module_or_object_name dash member_name``. For example, ``box_space-drop``."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:169
msgid "Making comments"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:171
msgid "Sometimes we may need to leave comments in a ReST file. To make sphinx ignore some text during processing, use the following per-line notation with \".. //\" as the comment marker:"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:175
msgid ".. // your comment here"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:179
msgid "The starting symbols \".. //\" do not interfere with the other ReST markup, and they are easy to find both visually and using grep. There are no symbols to escape in grep search, just go ahead with something like this:"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:183
msgid "grep \".. //\" doc/sphinx/dev_guide/*.rst"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:187
msgid "These comments don't work properly in nested documentation, though (e.g. if you leave a comment in module -> object -> method, sphinx ignores the comment and all nested content that follows in the method description)."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:193
msgid "Language and style issues"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:197
msgid "US vs British spelling"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:199
msgid "We use English US spelling."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:203
msgid "Instance vs server"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:205
msgid "We say \"instance\" rather than \"server\" to refer to an instance of Tarantool server. This keeps the manual terminology consistent with names like ``/etc/tarantool/instances.enabled`` in the Tarantool environment."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:209
msgid "Wrong usage: \"Replication allows multiple Tarantool *servers* to work on copies of the same databases.\""
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:212
msgid "Correct usage: \"Replication allows multiple Tarantool *instances* to work on copies of the same databases.\""
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:217
msgid "Examples and templates"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:221
msgid "Module and function"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:223
msgid "Here is an example of documenting a module (``my_fiber``) and a function (``my_fiber.create``)."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:230
msgid "Create and start a ``my_fiber`` object. The object is created and begins to run immediately."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:0
#: ../doc/1.7/dev_guide/documentation_guidelines.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/coio.rst:0
#: ../doc/1.7/dev_guide/reference_capi/error.rst:0
#: ../doc/1.7/dev_guide/reference_capi/error.rst:0
#: ../doc/1.7/dev_guide/reference_capi/error.rst:0
#: ../doc/1.7/dev_guide/reference_capi/error.rst:0
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:0
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:0
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:0
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:0
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:0
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:0
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:0
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:0
#: ../doc/1.7/dev_guide/reference_capi/latch.rst:0
#: ../doc/1.7/dev_guide/reference_capi/latch.rst:0
#: ../doc/1.7/dev_guide/reference_capi/latch.rst:0
#: ../doc/1.7/dev_guide/reference_capi/say.rst:0
#: ../doc/1.7/dev_guide/reference_capi/say.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
msgid "Parameters"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:233
msgid "the function to be associated with the ``my_fiber`` object"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:234
msgid "what will be passed to function"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:0
#: ../doc/1.7/dev_guide/documentation_guidelines.rst:0
msgid "return"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:236
msgid "created ``my_fiber`` object"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:0
msgid "rtype"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:237
msgid "userdata"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:239
#: ../doc/1.7/dev_guide/documentation_guidelines.rst:277
#: ../doc/1.7/dev_guide/reference_capi/coio.rst:68
#: ../doc/1.7/dev_guide/reference_capi/say.rst:77
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:163
msgid "**Example:**"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:241
msgid "tarantool> my_fiber = require('my_fiber')\n"
"---\n"
"...\n"
"tarantool> function function_name()\n"
"         >   my_fiber.sleep(1000)\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> my_fiber_object = my_fiber.create(function_name)\n"
"---\n"
"..."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:257
msgid "Module, class and method"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:259
msgid "Here is an example of documenting a module (``my_box.index``), a class (``my_index_object``) and a function (``my_index_object.rename``)."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:268
msgid "Rename an index."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:270
msgid "an object reference"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:271
msgid "a new name for the index (type = string)"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:273
msgid "nil"
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:275
msgid "Possible errors: index_object does not exist."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:279
msgid "tarantool> box.space.space55.index.primary:rename('secondary')\n"
"---\n"
"..."
msgstr ""

#: ../doc/1.7/dev_guide/documentation_guidelines.rst:285
msgid "Complexity Factors: Index size, Index type, Number of tuples accessed."
msgstr ""

#: ../doc/1.7/dev_guide/guidelines_index.rst:31
msgid "Guidelines"
msgstr ""

#: ../doc/1.7/dev_guide/index.rst:33
msgid "Contributor's Guide"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:37
#: ../doc/1.7/dev_guide/internals.rst:9
msgid "Data persistence and the WAL file format"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:39
#: ../doc/1.7/dev_guide/internals.rst:11
msgid "To maintain data persistence, Tarantool writes each data change request (insert, update, delete, replace, upsert) into a write-ahead log (WAL) file in the :ref:`wal_dir <cfg_basic-wal_dir>` directory. A new WAL file is created for every :ref:`rows_per_wal <cfg_binary_logging_snapshots-rows_per_wal>` records. Each data change request gets assigned a continuously growing 64-bit log sequence number. The name of the WAL file is based on the log sequence number of the first record in the file, plus an extension ``.xlog``."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:47
#: ../doc/1.7/dev_guide/internals.rst:19
msgid "Apart from a log sequence number and the data change request (formatted as in :ref:`Tarantool's binary protocol <box_protocol-iproto_protocol>`), each WAL record contains a header, some metadata, and then the data formatted according to `msgpack <https://en.wikipedia.org/wiki/MessagePack>`_ rules. For example, this is what the WAL file looks like after the first INSERT request (\"s:insert({1})\") for the sandbox database created in our :ref:`\"Getting started\" exercises <getting_started>`. On the left are the hexadecimal bytes that you would see with:"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:56
#: ../doc/1.7/dev_guide/internals.rst:28
msgid "$ hexdump 00000000000000000000.xlog"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:60
#: ../doc/1.7/dev_guide/internals.rst:32
msgid "and on the right are comments."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:62
#: ../doc/1.7/dev_guide/internals.rst:34
msgid "Hex dump of WAL file       Comment\n"
"--------------------       -------\n"
"58 4c 4f 47 0a             \"XLOG\\n\"\n"
"30 2e 31 33 0a             \"0.13\\n\" = version\n"
"53 65 72 76 65 72 3a 20    \"Server: \"\n"
"38 62 66 32 32 33 65 30 2d [Server UUID]\\n\n"
"36 39 31 34 2d 34 62 35 35\n"
"2d 39 34 64 32 2d 64 32 62\n"
"36 64 30 39 62 30 31 39 36\n"
"0a\n"
"56 43 6c 6f 63 6b 3a 20    \"Vclock: \"\n"
"7b 7d                      \"{}\" = vclock value, initially blank\n"
"...                        (not shown = tuples for system spaces)\n"
"d5 ba 0b ab                Magic row marker always = 0xab0bbad5\n"
"19                         Length, not including length of header, = 25 bytes\n"
"00                           Record header: previous crc32\n"
"ce 8c 3e d6 70               Record header: current crc32\n"
"a7 cc 73 7f 00 00 66 39      Record header: padding\n"
"84                         msgpack code meaning \"Map of 4 elements\" follows\n"
"00 02                         element#1: tag=request type, value=0x02=IPROTO_INSERT\n"
"02 01                         element#2: tag=server id, value=0x01\n"
"03 04                         element#3: tag=lsn, value=0x04\n"
"04 cb 41 d4 e2 2f 62 fd d5 d4 element#4: tag=timestamp, value=an 8-byte \"Float64\"\n"
"82                         msgpack code meaning \"map of 2 elements\" follows\n"
"10 cd 02 00                   element#1: tag=space id, value=512, big byte first\n"
"21 91 01                      element#2: tag=tuple, value=1-element fixed array={1}"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:91
#: ../doc/1.7/dev_guide/internals.rst:63
msgid "Tarantool processes requests atomically: a change is either accepted and recorded in the WAL, or discarded completely. Let's clarify how this happens, using the REPLACE request as an example:"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:95
#: ../doc/1.7/dev_guide/internals.rst:67
msgid "The server instance attempts to locate the original tuple by primary key. If found, a reference to the tuple is retained for later use."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:98
#: ../doc/1.7/dev_guide/internals.rst:70
msgid "The new tuple is validated. If for example it does not contain an indexed field, or it has an indexed field whose type does not match the type according to the index definition, the change is aborted."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:102
#: ../doc/1.7/dev_guide/internals.rst:74
msgid "The new tuple replaces the old tuple in all existing indexes."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:104
#: ../doc/1.7/dev_guide/internals.rst:76
msgid "A message is sent to the WAL writer running in a separate thread, requesting that the change be recorded in the WAL. The instance switches to work on the next request until the write is acknowledged."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:108
#: ../doc/1.7/dev_guide/internals.rst:80
msgid "On success, a confirmation is sent to the client. On failure, a rollback procedure is begun. During the rollback procedure, the transaction processor rolls back all changes to the database which occurred after the first failed change, from latest to oldest, up to the first failed change. All rolled back requests are aborted with :errcode:`ER_WAL_IO <ER_WAL_IO>` error. No new change is applied while rollback is in progress. When the rollback procedure is finished, the server restarts the processing pipeline."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:116
#: ../doc/1.7/dev_guide/internals.rst:88
msgid "One advantage of the described algorithm is that complete request pipelining is achieved, even for requests on the same value of the primary key. As a result, database performance doesn't degrade even if all requests refer to the same key in the same space."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:121
#: ../doc/1.7/dev_guide/internals.rst:93
msgid "The transaction processor thread communicates with the WAL writer thread using asynchronous (yet reliable) messaging; the transaction processor thread, not being blocked on WAL tasks, continues to handle requests quickly even at high volumes of disk I/O. A response to a request is sent as soon as it is ready, even if there were earlier incomplete requests on the same connection. In particular, SELECT performance, even for SELECTs running on a connection packed with UPDATEs and DELETEs, remains unaffected by disk load."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:129
#: ../doc/1.7/dev_guide/internals.rst:101
msgid "The WAL writer employs a number of durability modes, as defined in configuration variable :ref:`wal_mode <index-wal_mode>`. It is possible to turn the write-ahead log completely off, by setting :ref:`wal_mode <cfg_binary_logging_snapshots-wal_mode>` to *none*. Even without the write-ahead log it's still possible to take a persistent copy of the entire data set with the :ref:`box.snapshot() <box-snapshot>` request."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:136
#: ../doc/1.7/dev_guide/internals.rst:108
msgid "An .xlog file always contains changes based on the primary key. Even if the client requested an update or delete using a secondary key, the record in the .xlog file will contain the primary key."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:142
#: ../doc/1.7/dev_guide/internals.rst:114
msgid "The snapshot file format"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:144
#: ../doc/1.7/dev_guide/internals.rst:116
msgid "The format of a snapshot .snap file is nearly the same as the format of a WAL .xlog file. However, the snapshot header differs: it contains the instance's global unique identifier and the snapshot file's position in history, relative to earlier snapshot files. Also, the content differs: an .xlog file may contain records for any data-change requests (inserts, updates, upserts, and deletes), a .snap file may only contain records of inserts to memtx spaces."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:151
#: ../doc/1.7/dev_guide/internals.rst:123
msgid "Primarily, the .snap file's records are ordered by space id. Therefore the records of system spaces -- such as ``_schema``, ``_space``, ``_index``, ``_func``, ``_priv`` and ``_cluster`` -- will be at the start of the .snap file, before the records of any spaces that were created by users."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:156
#: ../doc/1.7/dev_guide/internals.rst:128
msgid "Secondarily, the .snap file's records are ordered by primary key within space id."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:162
#: ../doc/1.7/dev_guide/internals.rst:134
msgid "The recovery process"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:164
#: ../doc/1.7/dev_guide/internals.rst:136
msgid "The recovery process begins when box.cfg{} happens for the first time after the Tarantool server instance starts."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:167
#: ../doc/1.7/dev_guide/internals.rst:139
msgid "The recovery process must recover the databases as of the moment when the instance was last shut down. For this it may use the latest snapshot file and any WAL files that were written after the snapshot. One complicating factor is that Tarantool has two engines -- the memtx data must be reconstructed entirely from the snapshot and the WAL files, while the vinyl data will be on disk but might require updating around the time of a checkpoint. (When a snapshot happens, Tarantool tells the vinyl engine to make a checkpoint, and the snapshot operation is rolled back if anything goes wrong, so vinyl's checkpoint is at least as fresh as the snapshot file.)"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:184
#: ../doc/1.7/dev_guide/internals.rst:156
msgid "Step 1"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:180
#: ../doc/1.7/dev_guide/internals.rst:152
msgid "Read the configuration parameters in the ``box.cfg{}`` request. Parameters which affect recovery may include :ref:`work_dir <cfg_basic-work_dir>`, :ref:`wal_dir <cfg_basic-wal_dir>`, :ref:`memtx_dir <cfg_basic-memtx_dir>`, :ref:`vinyl_dir <cfg_basic-vinyl_dir>` and :ref:`force_recovery <cfg_binary_logging_snapshots-force_recovery>`."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:204
#: ../doc/1.7/dev_guide/internals.rst:176
msgid "Step 2"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:187
#: ../doc/1.7/dev_guide/internals.rst:159
msgid "Find the latest snapshot file. Use its data to reconstruct the in-memory databases. Instruct the vinyl engine to recover to the latest checkpoint."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:190
#: ../doc/1.7/dev_guide/internals.rst:162
msgid "There are actually two variations of the reconstruction procedure for memtx databases, depending on whether the recovery process is \"default\"."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:193
#: ../doc/1.7/dev_guide/internals.rst:165
msgid "If the recovery process is default (``force_recovery`` is ``false``), memtx can read data in the snapshot with all indexes disabled. First, all tuples are read into memory. Then, primary keys are built in bulk, taking advantage of the fact that the data is already sorted by primary key within each space."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:199
#: ../doc/1.7/dev_guide/internals.rst:171
msgid "If the recovery process is non-default (``force_recovery`` is ``true``), Tarantool performs additional checking. Indexes are enabled at the start, and tuples are added one by one. This means that any unique-key constraint violations will be caught, and any duplicates will be skipped. Normally there will be no constraint violations or duplicates, so these checks are only made if an error has occurred."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:211
#: ../doc/1.7/dev_guide/internals.rst:183
msgid "Step 3"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:207
#: ../doc/1.7/dev_guide/internals.rst:179
msgid "Find the WAL file that was made at the time of, or after, the snapshot file. Read its log entries until the log-entry LSN is greater than the LSN of the snapshot, or greater than the LSN of the vinyl checkpoint. This is the recovery process's \"start position\"; it matches the current state of the engines."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:215
#: ../doc/1.7/dev_guide/internals.rst:187
msgid "Step 4"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:214
#: ../doc/1.7/dev_guide/internals.rst:186
msgid "Redo the log entries, from the start position to the end of the WAL. The engine skips a redo instruction if it is older than the engine's checkpoint."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:218
#: ../doc/1.7/dev_guide/internals.rst:190
msgid "Step 5"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:218
#: ../doc/1.7/dev_guide/internals.rst:190
msgid "For the memtx engine, re-create all secondary indexes."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:224
#: ../doc/1.7/dev_guide/internals.rst:196
msgid "Server startup with replication"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:226
#: ../doc/1.7/dev_guide/internals.rst:198
msgid "In addition to the recovery process described above, the server must take additional steps and precautions if :ref:`replication <replication>` is enabled."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:229
#: ../doc/1.7/dev_guide/internals.rst:201
msgid "Once again the startup procedure is initiated by the ``box.cfg{}`` request. One of the ``box.cfg`` parameters may be :ref:`replication <cfg_replication-replication>` that specifies replication source(-s). We will refer to this replica, which is starting up due to ``box.cfg``, as the \"local\" replica to distinguish it from the other replicas in a replica set, which we will refer to as \"distant\" replicas."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:236
#: ../doc/1.7/dev_guide/internals.rst:208
msgid "*If there is no snapshot .snap file and the ``replication`` parameter is empty*: |br| then the local replica assumes it is an unreplicated \"standalone\" instance, or is the first replica of a new replica set. It will generate new UUIDs for itself and for the replica set. The replica UUID is stored in the ``_cluster`` space; the replica set UUID is stored in the ``_schema`` space. Since a snapshot contains all the data in all the spaces, that means the local replica's snapshot will contain the replica UUID and the replica set UUID. Therefore, when the local replica restarts on later occasions, it will be able to recover these UUIDs when it reads the .snap file."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:246
#: ../doc/1.7/dev_guide/internals.rst:218
msgid "*If there is no snapshot .snap file and the ``replication`` parameter is not empty and the ``_cluster`` space contains no other replica UUIDs*: |br| then the local replica assumes it is not a standalone instance, but is not yet part of a replica set. It must now join the replica set. It will send its replica UUID to the first distant replica which is listed in ``replication`` and which will act as a master. This is called the \"join request\". When a distant replica receives a join request, it will send back:"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:254
#: ../doc/1.7/dev_guide/internals.rst:226
msgid "the distant replica's replica set UUID,"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:255
#: ../doc/1.7/dev_guide/internals.rst:227
msgid "the contents of the distant replica's .snap file. |br| When the local replica receives this information, it puts the replica set UUID in its ``_schema`` space, puts the distant replica's UUID and connection information in its ``_cluster`` space, and makes a snapshot containing all the data sent by the distant replica. Then, if the local replica has data in its WAL .xlog files, it sends that data to the distant replica. The distant replica will receive this and update its own copy of the data, and add the local replica's UUID to its ``_cluster`` space."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:264
#: ../doc/1.7/dev_guide/internals.rst:236
msgid "*If there is no snapshot .snap file and the ``replication`` parameter is not empty and the ``_cluster`` space contains other replica UUIDs*: |br| then the local replica assumes it is not a standalone instance, and is already part of a replica set. It will send its replica UUID and replica set UUID to all the distant replicas which are listed in ``replication``. This is called the \"on-connect handshake\". When a distant replica receives an on-connect handshake: |br|"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:271
#: ../doc/1.7/dev_guide/internals.rst:243
msgid "the distant replica compares its own copy of the replica set UUID to the one in the on-connect handshake. If there is no match, then the handshake fails and the local replica will display an error."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:274
#: ../doc/1.7/dev_guide/internals.rst:246
msgid "the distant replica looks for a record of the connecting instance in its ``_cluster`` space. If there is none, then the handshake fails. |br| Otherwise the handshake is successful. The distant replica will read any new information from its own .snap and .xlog files, and send the new requests to the local replica."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:280
#: ../doc/1.7/dev_guide/internals.rst:252
msgid "In the end ... the local replica knows what replica set it belongs to, the distant replica knows that the local replica is a member of the replica set, and both replicas have the same database contents."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:286
#: ../doc/1.7/dev_guide/internals.rst:258
msgid "*If there is a snapshot file and replication source is not empty*: |br| first the local replica goes through the recovery process described in the previous section, using its own .snap and .xlog files. Then it sends a \"subscribe\" request to all the other replicas of the replica set. The subscribe request contains the server vector clock. The vector clock has a collection of pairs 'server id, lsn' for every replica in the ``_cluster`` system space. Each distant replica, upon receiving a subscribe request, will read its .xlog files' requests and send them to the local replica if (lsn of .xlog file request) is greater than (lsn of the vector clock in the subscribe request). After all the other replicas of the replica set have responded to the local replica's subscribe request, the replica startup is complete."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:298
#: ../doc/1.7/dev_guide/internals.rst:270
msgid "The following temporary limitations apply for version 1.7:"
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:300
#: ../doc/1.7/dev_guide/internals.rst:272
msgid "The URIs in the ``replication`` parameter should all be in the same order on all replicas. This is not mandatory but is an aid to consistency."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:302
#: ../doc/1.7/dev_guide/internals.rst:274
msgid "The replicas of a replica set should be started up at slightly different times. This is not mandatory but prevents a situation where each replica is waiting for the other replica to be ready."
msgstr ""

#: ../doc/1.7/dev_guide/internals.rst:305
#: ../doc/1.7/dev_guide/internals.rst:277
msgid "The maximum number of entries in the ``_cluster`` space is 32. Tuples for out-of-date replicas are not automatically re-used, so if this 32-replica limit is reached, users may have to reorganize the ``_cluster`` space manually."
msgstr ""

#: ../doc/1.7/dev_guide/internals_index.rst:31
msgid "Internals"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:31
msgid "Lua Style Guide"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:33
msgid "Inspiration:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:35
msgid "https://github.com/Olivine-Labs/lua-style-guide"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:36
msgid "http://dev.minetest.net/Lua_code_style_guidelines"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:37
msgid "http://sputnik.freewisdom.org/en/Coding_Standard"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:39
msgid "Programming style is an art. There is some arbitrariness to the rules, but there are sound rationales for them. It is useful not only to provide sound advice on style but to understand the underlying rationale and human aspect of why the style recommendations are formed:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:44
msgid "http://mindprod.com/jgloss/unmain.html"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:45
msgid "http://www.oreilly.com/catalog/perlbp/"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:46
msgid "http://books.google.com/books?id=QnghAQAAIAAJ"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:48
msgid "Zen of Python is good; understand it and use wisely:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Beautiful is better than ugly."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Explicit is better than implicit."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Simple is better than complex."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Complex is better than complicated."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Flat is better than nested."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Sparse is better than dense."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Readability counts."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Special cases aren't special enough to break the rules."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Although practicality beats purity."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Errors should never pass silently."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Unless explicitly silenced."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "In the face of ambiguity, refuse the temptation to guess."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "There should be one -- and preferably only one -- obvious way to do it."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Although that way may not be obvious at first unless you're Dutch."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Now is better than never."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Although never is often better than *right* now."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "If the implementation is hard to explain, it's a bad idea."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "If the implementation is easy to explain, it may be a good idea."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "Namespaces are one honking great idea -- let's do more of those!"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:0
msgid "https://www.python.org/dev/peps/pep-0020/"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:74
msgid "Indentation and Formatting"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:76
msgid "4 spaces instead tabs. PIL suggests using of two spaces, but programmer looks at code 4 up to 8 hours a day, so it's simplier to distinguish indentation with 4 spaces. Why spaces? Similar representation everywhere."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:80
msgid "You can use vim modelines:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:82
msgid "-- vim:ts=4 ss=4 sw=4 expandtab"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:86
msgid "A file should ends w/ one newline symbol, but shouldn't ends w/ blank line (two newline symbols)."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:89
msgid "Every do/while/for/if/function should indent 4 spaces."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:91
msgid "related ``or``/``and`` in ``if`` must be enclosed in the round brackets (). Example:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:93
msgid "if (a == true and b == false) or (a == false and b == true) then\n"
"    <...>\n"
"end -- good\n"
"\n"
"if a == true and b == false or a == false and b == true then\n"
"    <...>\n"
"end -- bad\n"
"\n"
"if a ^ b == true then\n"
"end -- good, but not explicit"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:106
msgid "Type conversion"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:108
msgid "Do not use concatenation to convert to string or addition to convert to number (use ``tostring``/``tonumber`` instead):"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:111
msgid "local a = 123\n"
"a = a .. ''\n"
"-- bad\n"
"\n"
"local a = 123\n"
"a = tostring(a)\n"
"-- good\n"
"\n"
"local a = '123'\n"
"a = a + 5 -- 128\n"
"-- bad\n"
"\n"
"local a = '123'\n"
"a = tonumber(a) + 5 -- 128\n"
"-- good"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:129
msgid "Try to avoid multiple nested ``if``'s with common body:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:131
msgid "if (a == true and b == false) or (a == false and b == true) then\n"
"    do_something()\n"
"end\n"
"-- good\n"
"\n"
"if a == true then\n"
"    if b == false then\n"
"        do_something()\n"
"    end\n"
"if b == true then\n"
"    if a == false then\n"
"        do_something()\n"
"    end\n"
"end\n"
"-- bad"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:149
msgid "Avoid multiple concatenations in one statement, use ``string.format`` instead:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:151
msgid "function say_greeting(period, name)\n"
"    local a = \"good  \" .. period .. \", \" .. name\n"
"end\n"
"-- bad\n"
"\n"
"function say_greeting(period, name)\n"
"    local a = string.format(\"good %s, %s\", period, name)\n"
"end\n"
"-- good\n"
"\n"
"local say_greeting_fmt = \"good %s, %s\"\n"
"function say_greeting(period, name)\n"
"    local a = say_greeting_fmt:format(period, name)\n"
"end\n"
"-- best"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:169
msgid "Use ``and``/``or`` for default variable values"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:171
msgid "function(input)\n"
"    input = input or 'default_value'\n"
"end -- good\n"
"\n"
"function(input)\n"
"    if input == nil then\n"
"        input = 'default_value'\n"
"    end\n"
"end -- ok, but excessive"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:183
msgid "``if``'s and return statements:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:185
msgid "if a == true then\n"
"    return do_something()\n"
"end\n"
"do_other_thing() -- good\n"
"\n"
"if a == true then\n"
"    return do_something()\n"
"else\n"
"    do_other_thing()\n"
"end -- bad"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:198
msgid "Using spaces:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:200
msgid "one shouldn't use spaces between function name and opening round bracket, but arguments must be splitted with one whitespace charachter"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:203
msgid "function name (arg1,arg2,...)\n"
"end -- bad\n"
"\n"
"function name(arg1, arg2, ...)\n"
"end -- good"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:211
msgid "use space after comment marker"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:213
msgid "while true do -- inline comment\n"
"-- comment\n"
"do_something()\n"
"end\n"
"--[[\n"
"  multiline\n"
"  comment\n"
"]]--"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:224
msgid "surrounding operators"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:226
msgid "local thing=1\n"
"thing = thing-1\n"
"thing = thing*1\n"
"thing = 'string'..'s'\n"
"-- bad\n"
"\n"
"local thing = 1\n"
"thing = thing - 1\n"
"thing = thing * 1\n"
"thing = 'string' .. 's'\n"
"-- good"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:240
msgid "use space after commas in tables"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:242
msgid "local thing = {1,2,3}\n"
"thing = {1 , 2 , 3}\n"
"thing = {1 ,2 ,3}\n"
"-- bad\n"
"\n"
"local thing = {1, 2, 3}\n"
"-- good"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:252
msgid "use space in map definitions around equality sign and commas"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:254
msgid "return {1,2,3,4} -- bad\n"
"return {\n"
"    key1 = val1,key2=val2\n"
"} -- bad\n"
"\n"
"return {\n"
"    1, 2, 3, 4\n"
"    key1 = val1, key2 = val2,\n"
"    key3 = vallll\n"
"} -- good"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:267
msgid "also, you may use alignment:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:269
msgid "return {\n"
"    long_key  = 'vaaaaalue',\n"
"    key       = 'val',\n"
"    something = 'even better'\n"
"}"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:277
msgid "extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations)"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:281
msgid "use blank lines in function, sparingly, to indicate logical sections"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:283
msgid "if thing then\n"
"    -- ...stuff...\n"
"end\n"
"function derp()\n"
"    -- ...stuff...\n"
"end\n"
"local wat = 7\n"
"-- bad\n"
"\n"
"if thing then\n"
"    -- ...stuff...\n"
"end\n"
"\n"
"function derp()\n"
"    -- ...stuff...\n"
"end\n"
"\n"
"local wat = 7\n"
"-- good"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:305
msgid "Delete whitespace at EOL (strongly forbidden. Use ``:s/\\s\\+$//gc`` in vim to delete them)"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:310
msgid "Avoid global variable"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:312
msgid "You must avoid global variables. If you have an exceptional case, use ``_G`` variable to set it, add prefix or add table instead of prefix:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:315
msgid "function bad_global_example()\n"
"end -- very, very bad\n"
"\n"
"function good_local_example()\n"
"end\n"
"_G.modulename_good_local_example = good_local_example -- good\n"
"_G.modulename = {}\n"
"_G.modulename.good_local_example = good_local_example -- better"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:326
msgid "Always use prefix to avoid name clash"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:330
msgid "Naming"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:332
msgid "names of variables/\"objects\" and \"methods\"/functions: snake_case"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:333
msgid "names of \"classes\": CamelCase"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:334
msgid "private variables/methods (properties in the future) of object starts with underscores ``<object>._<name>``. Avoid using of ``local function private_methods(self) end``"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:337
msgid "boolean - naming ``is_<...>``, ``isnt_<...>``, ``has_``, ``hasnt_`` is a good style."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:338
msgid "for \"very local\" variables: - ``t`` is for tables - ``i``, ``j`` are for indexing - ``n`` is for counting - ``k``, ``v`` is what you get out of ``pairs()`` (are acceptable, ``_`` if unused) - ``i``, ``v`` is what you get out of ``ipairs()`` (are acceptable, ``_`` if unused) - ``k``/``key`` is for table keys - ``v``/``val``/``value`` is for values that are passed around - ``x``/``y``/``z`` is for generic math quantities - ``s``/``str``/``string`` is for strings - ``c`` is for 1-char strings - ``f``/``func``/``cb`` are for functions - ``status, <rv>..`` or ``ok, <rv>..`` is what you get out of pcall/xpcall - ``buf, sz`` is a (buffer, size) pair - ``<name>_p`` is for pointers - ``t0``.. is for timestamps - ``err`` is for errors"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:355
msgid "abbrevations are acceptable if they're unambigous and if you'll document (or they're too common) them."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:357
msgid "global variables are written with ALL_CAPS. If it's some system variable, then they're using underscore to define it (``_G``/``_VERSION``/..)"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:359
msgid "module naming snake_case (avoid underscores and dashes) - 'luasql', instead of 'Lua-SQL'"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:361
msgid "``*_mt`` and ``*_methods`` defines metatable and methods table"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:365
msgid "Idioms and patterns"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:367
msgid "Always use round brackets in call of functions except multiple cases (common lua style idioms):"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:370
msgid "``*.cfg{ }`` functions (``box.cfg``/``memcached.cfg``/..)"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:371
msgid "``ffi.cdef[[ ]]`` function"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:373
msgid "Avoid these kind of constructions:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:375
msgid "<func>'<name>' (strongly avoid require'..')"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:376
msgid "``function object:method() end`` (use ``functon object.method(self) end`` instead)"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:377
msgid "do not use semicolon as table separator (only comma)"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:378
msgid "semicolons at the end of line (only to split multiple statements on one line)"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:379
msgid "try to avoid unnecessary function creation (closures/..)"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:383
msgid "Modules"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:385
msgid "Don't start modules with license/authors/descriptions, you can write it in LICENSE/AUTHORS/README files. For writing modules use one of the two patterns (dont use ``modules()``):"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:389
msgid "local M = {}\n"
"\n"
"function M.foo()\n"
"...\n"
"end\n"
"\n"
"function M.bar()\n"
"...\n"
"end\n"
"\n"
"return M"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:403
msgid "or"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:405
msgid "local function foo()\n"
"...\n"
"end\n"
"\n"
"local function bar()\n"
"...\n"
"end\n"
"\n"
"return {\n"
"foo = foo,\n"
"bar = bar,\n"
"}"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:422
msgid "Commenting"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:424
msgid "You should write code the way it shouldn't be described, but don't forget about commenting it. You shouldn't comment Lua syntax (assume that reader already knows Lua language). Try to tell about functions/variable names/etc."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:428
msgid "Multiline comments: use matching (``--[[ ]]--``) instead of simple (``--[[ ]]``)."
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:431
msgid "Public function comments (??):"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:433
msgid "--- Copy any table (shallow and deep version)\n"
"-- * deepcopy: copies all levels\n"
"-- * shallowcopy: copies only first level\n"
"-- Supports __copy metamethod for copying custom tables with metatables\n"
"-- @function gsplit\n"
"-- @table         inp  original table\n"
"-- @shallow[opt]  sep  flag for shallow copy\n"
"-- @returns            table (copy)"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:446
msgid "Testing"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:448
msgid "Use ``tap`` module for writing efficient tests. Example of test file:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:450
msgid "#!/usr/bin/env tarantool\n"
"\n"
"local test = require('tap').test('table')\n"
"test:plan(31)\n"
"\n"
"do -- check basic table.copy (deepcopy)\n"
"    local example_table = {\n"
"        {1, 2, 3},\n"
"        {\"help, I'm very nested\", {{{ }}} }\n"
"    }\n"
"\n"
"    local copy_table = table.copy(example_table)\n"
"\n"
"    test:is_deeply(\n"
"        example_table,\n"
"        copy_table,\n"
"        \"checking, that deepcopy behaves ok\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table,\n"
"        copy_table,\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[1],\n"
"        copy_table[1],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[2],\n"
"        copy_table[2],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[2][2],\n"
"        copy_table[2][2],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[2][2][1],\n"
"        copy_table[2][2][1],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"end\n"
"\n"
"<...>\n"
"\n"
"os.exit(test:check() == true and 0 or 1)"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:501
msgid "When you'll test your code output will be something like this:"
msgstr ""

#: ../doc/1.7/dev_guide/lua_style_guide.rst:503
msgid "TAP version 13\n"
"1..31\n"
"ok - checking, that deepcopy behaves ok\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"..."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:31
msgid "Python Style Guide"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:35
msgid "Introduction"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:37
msgid "This document gives coding conventions for the Python code comprising the standard library in the main Python distribution.  Please see the companion informational PEP describing style guidelines for the C code in the C implementation of Python [1]_."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:42
msgid "This document and PEP 257 (Docstring Conventions) were adapted from Guido's original Python Style Guide essay, with some additions from Barry's style guide [2]_."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:49
msgid "A Foolish Consistency is the Hobgoblin of Little Minds"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:51
msgid "One of Guido's key insights is that code is read much more often than it is written.  The guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code.  As PEP 20 says, \"Readability counts\"."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:56
msgid "A style guide is about consistency.  Consistency with this style guide is important.  Consistency within a project is more important. Consistency within one module or function is the most important."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:60
msgid "But most importantly: know when to be inconsistent -- sometimes the style guide just doesn't apply.  When in doubt, use your best judgment.  Look at other examples and decide what looks best.  And don't hesitate to ask!"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:65
msgid "Two good reasons to break a particular rule:"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:67
msgid "When applying the rule would make the code less readable, even for someone who is used to reading code that follows the rules."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:70
msgid "To be consistent with surrounding code that also breaks it (maybe for historic reasons) -- although this is also an opportunity to clean up someone else's mess (in true XP style)."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:77
msgid "Code lay-out"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:81
msgid "Indentation"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:83
msgid "Use 4 spaces per indentation level."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:85
msgid "For really old code that you don't want to mess up, you can continue to use 8-space tabs."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:88
msgid "Continuation lines should align wrapped elements either vertically using Python's implicit line joining inside parentheses, brackets and braces, or using a hanging indent.  When using a hanging indent the following considerations should be applied; there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:95
#: ../doc/1.7/dev_guide/python_style_guide.rst:352
#: ../doc/1.7/dev_guide/python_style_guide.rst:381
#: ../doc/1.7/dev_guide/python_style_guide.rst:400
#: ../doc/1.7/dev_guide/python_style_guide.rst:413
msgid "Yes::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:97
msgid "# Aligned with opening delimiter\n"
"foo = long_function_name(var_one, var_two,\n"
"                         var_three, var_four)\n"
"\n"
"# More indentation included to distinguish this from the rest.\n"
"def long_function_name(\n"
"        var_one, var_two, var_three,\n"
"        var_four):\n"
"    print(var_one)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:107
#: ../doc/1.7/dev_guide/python_style_guide.rst:358
#: ../doc/1.7/dev_guide/python_style_guide.rst:389
#: ../doc/1.7/dev_guide/python_style_guide.rst:405
msgid "No::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:109
msgid "# Arguments on first line forbidden when not using vertical alignment\n"
"foo = long_function_name(var_one, var_two,\n"
"    var_three, var_four)\n"
"\n"
"# Further indentation required as indentation is not distinguishable\n"
"def long_function_name(\n"
"    var_one, var_two, var_three,\n"
"    var_four):\n"
"    print(var_one)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:119
msgid "Optional::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:121
msgid "# Extra indentation is not necessary.\n"
"foo = long_function_name(\n"
"  var_one, var_two,\n"
"  var_three, var_four)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:126
msgid "The closing brace/bracket/parenthesis on multi-line constructs may either line up under the first non-whitespace character of the last line of list, as in::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:130
msgid "my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"    ]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
"    )"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:139
msgid "or it may be lined up under the first character of the line that starts the multi-line construct, as in::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:142
msgid "my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
")"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:154
msgid "Tabs or Spaces?"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:156
msgid "Never mix tabs and spaces."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:158
msgid "The most popular way of indenting Python is with spaces only.  The second-most popular way is with tabs only.  Code indented with a mixture of tabs and spaces should be converted to using spaces exclusively.  When invoking the Python command line interpreter with the ``-t`` option, it issues warnings about code that illegally mixes tabs and spaces.  When using ``-tt`` these warnings become errors. These options are highly recommended!"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:166
msgid "For new projects, spaces-only are strongly recommended over tabs. Most editors have features that make this easy to do."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:171
msgid "Maximum Line Length"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:173
msgid "Limit all lines to a maximum of 79 characters."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:175
msgid "There are still many devices around that are limited to 80 character lines; plus, limiting windows to 80 characters makes it possible to have several windows side-by-side.  The default wrapping on such devices disrupts the visual structure of the code, making it more difficult to understand.  Therefore, please limit all lines to a maximum of 79 characters.  For flowing long blocks of text (docstrings or comments), limiting the length to 72 characters is recommended."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:183
msgid "The preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces.  Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:189
msgid "Backslashes may still be appropriate at times.  For example, long, multiple ``with``-statements cannot use implicit continuation, so backslashes are acceptable::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:193
msgid "with open('/path/to/some/file/you/want/to/read') as file_1, \\\n"
"        open('/path/to/some/file/being/written', 'w') as file_2:\n"
"    file_2.write(file_1.read())"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:197
msgid "Another such case is with ``assert`` statements."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:199
msgid "Make sure to indent the continued line appropriately.  The preferred place to break around a binary operator is *after* the operator, not before it.  Some examples::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:203
msgid "class Rectangle(Blob):\n"
"\n"
"    def __init__(self, width, height,\n"
"                 color='black', emphasis=None, highlight=0):\n"
"        if (width == 0 and height == 0 and\n"
"            color == 'red' and emphasis == 'strong' or\n"
"            highlight > 100):\n"
"            raise ValueError(\"sorry, you lose\")\n"
"        if width == 0 and height == 0 and (color == 'red' or\n"
"                                           emphasis is None):\n"
"            raise ValueError(\"I don't think so -- values are %s, %s\" %\n"
"                             (width, height))\n"
"        Blob.__init__(self, width, height,\n"
"                      color, emphasis, highlight)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:220
msgid "Blank Lines"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:222
msgid "Separate top-level function and class definitions with two blank lines."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:225
msgid "Method definitions inside a class are separated by a single blank line."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:228
msgid "Extra blank lines may be used (sparingly) to separate groups of related functions.  Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations)."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:232
msgid "Use blank lines in functions, sparingly, to indicate logical sections."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:234
msgid "Python accepts the control-L (i.e. ^L) form feed character as whitespace; Many tools treat these characters as page separators, so you may use them to separate pages of related sections of your file. Note, some editors and web-based code viewers may not recognize control-L as a form feed and will show another glyph in its place."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:242
msgid "Encodings (PEP 263)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:244
msgid "Code in the core Python distribution should always use the ASCII or Latin-1 encoding (a.k.a. ISO-8859-1).  For Python 3.0 and beyond, UTF-8 is preferred over Latin-1, see PEP 3120."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:248
msgid "Files using ASCII should not have a coding cookie.  Latin-1 (or UTF-8) should only be used when a comment or docstring needs to mention an author name that requires Latin-1; otherwise, using ``\\x``, ``\\u`` or ``\\U`` escapes is the preferred way to include non-ASCII data in string literals."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:254
msgid "For Python 3.0 and beyond, the following policy is prescribed for the standard library (see PEP 3131): All identifiers in the Python standard library MUST use ASCII-only identifiers, and SHOULD use English words wherever feasible (in many cases, abbreviations and technical terms are used which aren't English). In addition, string literals and comments must also be in ASCII. The only exceptions are (a) test cases testing the non-ASCII features, and (b) names of authors. Authors whose names are not based on the latin alphabet MUST provide a latin transliteration of their names."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:265
msgid "Open source projects with a global audience are encouraged to adopt a similar policy."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:271
msgid "Imports"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:273
msgid "Imports should usually be on separate lines, e.g.::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:280
msgid "It's okay to say this though::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:284
msgid "Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:287
msgid "Imports should be grouped in the following order:"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:289
msgid "standard library imports"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:290
msgid "related third party imports"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:291
msgid "local application/library specific imports"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:293
msgid "You should put a blank line between each group of imports."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:295
msgid "Put any relevant ``__all__`` specification after the imports."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:297
msgid "Relative imports for intra-package imports are highly discouraged. Always use the absolute package path for all imports.  Even now that PEP 328 is fully implemented in Python 2.5, its style of explicit relative imports is actively discouraged; absolute imports are more portable and usually more readable."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:303
msgid "When importing a class from a class-containing module, it's usually okay to spell this::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:309
msgid "If this spelling causes local name clashes, then spell them ::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:314
msgid "and use \"myclass.MyClass\" and \"foo.bar.yourclass.YourClass\"."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:319
msgid "Whitespace in Expressions and Statements"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:323
msgid "Pet Peeves"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:325
msgid "Avoid extraneous whitespace in the following situations:"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:327
msgid "Immediately inside parentheses, brackets or braces. ::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:332
msgid "Immediately before a comma, semicolon, or colon::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:337
msgid "Immediately before the open parenthesis that starts the argument list of a function call::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:343
msgid "Immediately before the open parenthesis that starts an indexing or slicing::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:349
msgid "More than one space around an assignment (or other) operator to align it with another."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:367
msgid "Other Recommendations"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:369
msgid "Always surround these binary operators with a single space on either side: assignment (``=``), augmented assignment (``+=``, ``-=`` etc.), comparisons (``==``, ``<``, ``>``, ``!=``, ``<>``, ``<=``, ``>=``, ``in``, ``not in``, ``is``, ``is not``), Booleans (``and``, ``or``, ``not``)."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:375
msgid "If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies). Use your own judgement; however, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:397
msgid "Don't use spaces around the ``=`` sign when used to indicate a keyword argument or a default parameter value."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:410
msgid "Compound statements (multiple statements on the same line) are generally discouraged."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:421
#: ../doc/1.7/dev_guide/python_style_guide.rst:430
msgid "Rather not::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:426
msgid "While sometimes it's okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements.  Also avoid folding such long lines!"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:436
msgid "Definitely not::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:451
msgid "Comments"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:453
msgid "Comments that contradict the code are worse than no comments.  Always make a priority of keeping the comments up-to-date when the code changes!"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:457
msgid "Comments should be complete sentences.  If a comment is a phrase or sentence, its first word should be capitalized, unless it is an identifier that begins with a lower case letter (never alter the case of identifiers!)."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:462
msgid "If a comment is short, the period at the end can be omitted.  Block comments generally consist of one or more paragraphs built out of complete sentences, and each sentence should end in a period."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:466
msgid "You should use two spaces after a sentence-ending period."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:468
msgid "When writing English, Strunk and White apply."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:470
msgid "Python coders from non-English speaking countries: please write your comments in English, unless you are 120% sure that the code will never be read by people who don't speak your language."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:476
msgid "Block Comments"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:478
msgid "Block comments generally apply to some (or all) code that follows them, and are indented to the same level as that code.  Each line of a block comment starts with a ``#`` and a single space (unless it is indented text inside the comment)."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:483
msgid "Paragraphs inside a block comment are separated by a line containing a single ``#``."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:488
msgid "Inline Comments"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:490
msgid "Use inline comments sparingly."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:492
msgid "An inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement.  They should start with a # and a single space."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:496
msgid "Inline comments are unnecessary and in fact distracting if they state the obvious.  Don't do this::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:499
msgid "x = x + 1                 # Increment x"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:501
msgid "But sometimes, this is useful::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:503
msgid "x = x + 1                 # Compensate for border"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:507
msgid "Documentation Strings"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:509
msgid "Conventions for writing good documentation strings (a.k.a. \"docstrings\") are immortalized in PEP 257."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:512
msgid "Write docstrings for all public modules, functions, classes, and methods.  Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does.  This comment should appear after the ``def`` line."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:517
msgid "PEP 257 describes good docstring conventions.  Note that most importantly, the ``\"\"\"`` that ends a multiline docstring should be on a line by itself, and preferably preceded by a blank line, e.g.::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:527
msgid "For one liner docstrings, it's okay to keep the closing ``\"\"\"`` on the same line."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:533
msgid "Version Bookkeeping"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:535
msgid "If you have to have Subversion, CVS, or RCS crud in your source file, do it as follows. ::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:538
msgid "__version__ = \"$Revision$\"\n"
"# $Source$"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:541
msgid "These lines should be included after the module's docstring, before any other code, separated by a blank line above and below."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:547
msgid "Naming Conventions"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:549
msgid "The naming conventions of Python's library are a bit of a mess, so we'll never get this completely consistent -- nevertheless, here are the currently recommended naming standards.  New modules and packages (including third party frameworks) should be written to these standards, but where an existing library has a different style, internal consistency is preferred."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:558
msgid "Descriptive: Naming Styles"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:560
msgid "There are a lot of different naming styles.  It helps to be able to recognize what naming style is being used, independently from what they are used for."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:564
msgid "The following naming styles are commonly distinguished:"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:566
msgid "``b`` (single lowercase letter)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:567
msgid "``B`` (single uppercase letter)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:568
msgid "``lowercase``"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:569
msgid "``lower_case_with_underscores``"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:570
msgid "``UPPERCASE``"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:571
msgid "``UPPER_CASE_WITH_UNDERSCORES``"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:572
msgid "``CapitalizedWords`` (or CapWords, or CamelCase -- so named because of the bumpy look of its letters [3]_).  This is also sometimes known as StudlyCaps."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:576
msgid "Note: When using abbreviations in CapWords, capitalize all the letters of the abbreviation.  Thus HTTPServerError is better than HttpServerError."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:579
msgid "``mixedCase`` (differs from CapitalizedWords by initial lowercase character!)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:581
msgid "``Capitalized_Words_With_Underscores`` (ugly!)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:583
msgid "There's also the style of using a short unique prefix to group related names together.  This is not used much in Python, but it is mentioned for completeness.  For example, the ``os.stat()`` function returns a tuple whose items traditionally have names like ``st_mode``, ``st_size``, ``st_mtime`` and so on.  (This is done to emphasize the correspondence with the fields of the POSIX system call struct, which helps programmers familiar with that.)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:591
msgid "The X11 library uses a leading X for all its public functions.  In Python, this style is generally deemed unnecessary because attribute and method names are prefixed with an object, and function names are prefixed with a module name."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:596
msgid "In addition, the following special forms using leading or trailing underscores are recognized (these can generally be combined with any case convention):"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:600
msgid "``_single_leading_underscore``: weak \"internal use\" indicator. E.g. ``from M import *`` does not import objects whose name starts with an underscore."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:604
msgid "``single_trailing_underscore_``: used by convention to avoid conflicts with Python keyword, e.g. ::"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:609
msgid "``__double_leading_underscore``: when naming a class attribute, invokes name mangling (inside class FooBar, ``__boo`` becomes ``_FooBar__boo``; see below)."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:613
msgid "``__double_leading_and_trailing_underscore__``: \"magic\" objects or attributes that live in user-controlled namespaces. E.g. ``__init__``, ``__import__`` or ``__file__``.  Never invent such names; only use them as documented."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:620
msgid "Prescriptive: Naming Conventions"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:624
msgid "Names to Avoid"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:626
msgid "Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye) as single character variable names."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:630
msgid "In some fonts, these characters are indistinguishable from the numerals one and zero.  When tempted to use 'l', use 'L' instead."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:635
msgid "Package and Module Names"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:637
msgid "Modules should have short, all-lowercase names.  Underscores can be used in the module name if it improves readability.  Python packages should also have short, all-lowercase names, although the use of underscores is discouraged."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:642
msgid "Since module names are mapped to file names, and some file systems are case insensitive and truncate long names, it is important that module names be chosen to be fairly short -- this won't be a problem on Unix, but it may be a problem when the code is transported to older Mac or Windows versions, or DOS."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:648
msgid "When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. ``_socket``)."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:655
msgid "Class Names"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:657
msgid "Almost without exception, class names use the CapWords convention. Classes for internal use have a leading underscore in addition."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:662
msgid "Exception Names"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:664
msgid "Because exceptions should be classes, the class naming convention applies here.  However, you should use the suffix \"Error\" on your exception names (if the exception actually is an error)."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:670
msgid "Global Variable Names"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:672
msgid "(Let's hope that these variables are meant for use inside one module only.)  The conventions are about the same as those for functions."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:675
msgid "Modules that are designed for use via ``from M import *`` should use the ``__all__`` mechanism to prevent exporting globals, or use the older convention of prefixing such globals with an underscore (which you might want to do to indicate these globals are \"module non-public\")."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:683
msgid "Function Names"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:685
msgid "Function names should be lowercase, with words separated by underscores as necessary to improve readability."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:688
msgid "mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:694
msgid "Function and method arguments"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:696
msgid "Always use ``self`` for the first argument to instance methods."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:698
msgid "Always use ``cls`` for the first argument to class methods."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:700
msgid "If a function argument's name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption.  Thus ``class_`` is better than ``clss``.  (Perhaps better is to avoid such clashes by using a synonym.)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:708
msgid "Method Names and Instance Variables"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:710
msgid "Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:713
msgid "Use one leading underscore only for non-public methods and instance variables."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:716
msgid "To avoid name clashes with subclasses, use two leading underscores to invoke Python's name mangling rules."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:719
msgid "Python mangles these names with the class name: if class Foo has an attribute named ``__a``, it cannot be accessed by ``Foo.__a``.  (An insistent user could still gain access by calling ``Foo._Foo__a``.) Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:725
msgid "Note: there is some controversy about the use of __names (see below)."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:729
msgid "Constants"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:731
msgid "Constants are usually defined on a module level and written in all capital letters with underscores separating words.  Examples include ``MAX_OVERFLOW`` and ``TOTAL``."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:737
msgid "Designing for inheritance"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:739
msgid "Always decide whether a class's methods and instance variables (collectively: \"attributes\") should be public or non-public.  If in doubt, choose non-public; it's easier to make it public later than to make a public attribute non-public."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:744
msgid "Public attributes are those that you expect unrelated clients of your class to use, with your commitment to avoid backward incompatible changes.  Non-public attributes are those that are not intended to be used by third parties; you make no guarantees that non-public attributes won't change or even be removed."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:750
msgid "We don't use the term \"private\" here, since no attribute is really private in Python (without a generally unnecessary amount of work)."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:753
msgid "Another category of attributes are those that are part of the \"subclass API\" (often called \"protected\" in other languages).  Some classes are designed to be inherited from, either to extend or modify aspects of the class's behavior.  When designing such a class, take care to make explicit decisions about which attributes are public, which are part of the subclass API, and which are truly only to be used by your base class."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:761
msgid "With this in mind, here are the Pythonic guidelines:"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:763
msgid "Public attributes should have no leading underscores."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:765
msgid "If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name.  This is preferable to an abbreviation or corrupted spelling.  (However, not withstanding this rule, 'cls' is the preferred spelling for any variable or argument which is known to be a class, especially the first argument to a class method.)"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:773
#: ../doc/1.7/dev_guide/python_style_guide.rst:784
#: ../doc/1.7/dev_guide/python_style_guide.rst:806
msgid "Note 1:"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:773
msgid "See the argument name recommendation above for class methods."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:775
msgid "For simple public data attributes, it is best to expose just the attribute name, without complicated accessor/mutator methods.  Keep in mind that Python provides an easy path to future enhancement, should you find that a simple data attribute needs to grow functional behavior.  In that case, use properties to hide functional implementation behind simple data attribute access syntax."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:784
msgid "Properties only work on new-style classes."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:788
#: ../doc/1.7/dev_guide/python_style_guide.rst:811
msgid "Note 2:"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:787
msgid "Try to keep the functional behavior side-effect free, although side-effects such as caching are generally fine."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:793
#: ../doc/1.7/dev_guide/python_style_guide.rst:816
msgid "Note 3:"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:791
msgid "Avoid using properties for computationally expensive operations; the attribute notation makes the caller believe that access is (relatively) cheap."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:795
msgid "If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores.  This invokes Python's name mangling algorithm, where the name of the class is mangled into the attribute name.  This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:804
msgid "Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:809
msgid "Name mangling can make certain uses, such as debugging and ``__getattr__()``, less convenient.  However the name mangling algorithm is well documented and easy to perform manually."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:814
msgid "Not everyone likes name mangling.  Try to balance the need to avoid accidental name clashes with potential use by advanced callers."
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:820
msgid "References"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:822
msgid "`PEP 7, Style Guide for C Code, van Rossum <https://www.python.org/dev/peps/pep-0007/>`_"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:823
msgid "`Barry's GNU Mailman style guide <http://barry.warsaw.us/software/STYLEGUIDE.txt>`_"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:824
msgid "`CamelCase Wikipedia page <http://www.wikipedia.com/wiki/CamelCase>`_"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:828
msgid "Copyright"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:830
msgid "Author:"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:832
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../doc/1.7/dev_guide/python_style_guide.rst:833
msgid "Barry Warsaw <barry@python.org>"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:31
msgid "Module `box`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:35
msgid "Opaque structure passed to the stored C procedure"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:39
msgid "Return a tuple from stored C procedure."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:41
msgid "Returned tuple is automatically reference counted by Tarantool."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:43
msgid "an opaque structure passed to the stored C procedure by Tarantool"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:45
msgid "a tuple to return"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:0
#: ../doc/1.7/dev_guide/reference_capi/coio.rst:0
#: ../doc/1.7/dev_guide/reference_capi/coio.rst:0
#: ../doc/1.7/dev_guide/reference_capi/coio.rst:0
#: ../doc/1.7/dev_guide/reference_capi/coio.rst:0
#: ../doc/1.7/dev_guide/reference_capi/error.rst:0
#: ../doc/1.7/dev_guide/reference_capi/error.rst:0
#: ../doc/1.7/dev_guide/reference_capi/error.rst:0
#: ../doc/1.7/dev_guide/reference_capi/error.rst:0
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:0
#: ../doc/1.7/dev_guide/reference_capi/latch.rst:0
#: ../doc/1.7/dev_guide/reference_capi/latch.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:0
#: ../doc/1.7/dev_guide/reference_capi/txn.rst:0
#: ../doc/1.7/dev_guide/reference_capi/txn.rst:0
#: ../doc/1.7/dev_guide/reference_capi/txn.rst:0
#: ../doc/1.7/dev_guide/reference_capi/txn.rst:0
#: ../doc/1.7/dev_guide/reference_capi/txn.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
msgid "Returns"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:47
msgid "-1 on error (perhaps, out of memory; check :ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:49
#: ../doc/1.7/dev_guide/reference_capi/box.rst:97
#: ../doc/1.7/dev_guide/reference_capi/box.rst:112
#: ../doc/1.7/dev_guide/reference_capi/box.rst:128
#: ../doc/1.7/dev_guide/reference_capi/box.rst:150
#: ../doc/1.7/dev_guide/reference_capi/box.rst:172
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:85
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:98
msgid "0 otherwise"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:55
msgid "Find space id by name."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:57
msgid "This function performs SELECT request to _vspace system space."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:59
msgid "space name"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:60
#: ../doc/1.7/dev_guide/reference_capi/box.rst:74
msgid "length of ``name``"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:62
#: ../doc/1.7/dev_guide/reference_capi/box.rst:76
msgid ":c:macro:`BOX_ID_NIL` on error or if not found (check :ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:64
#: ../doc/1.7/dev_guide/reference_capi/box.rst:78
msgid "space_id otherwise"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:66
msgid "See also: :c:type:`box_index_id_by_name`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:70
msgid "Find index id by name."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:72
#: ../doc/1.7/dev_guide/reference_capi/box.rst:90
#: ../doc/1.7/dev_guide/reference_capi/box.rst:105
#: ../doc/1.7/dev_guide/reference_capi/box.rst:120
#: ../doc/1.7/dev_guide/reference_capi/box.rst:136
#: ../doc/1.7/dev_guide/reference_capi/box.rst:158
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:113
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:152
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:162
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:172
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:191
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:207
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:223
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:239
msgid "space identifier"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:73
msgid "index name"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:80
msgid "This function performs SELECT request to _vindex system space."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:82
msgid "See also: :c:type:`box_space_id_by_name`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:88
msgid "Execute an INSERT/REPLACE request."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:91
#: ../doc/1.7/dev_guide/reference_capi/box.rst:106
#: ../doc/1.7/dev_guide/reference_capi/box.rst:160
msgid "encoded tuple in MsgPack Array format ([ field1, field2, ...])"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:92
#: ../doc/1.7/dev_guide/reference_capi/box.rst:107
#: ../doc/1.7/dev_guide/reference_capi/box.rst:161
msgid "end of a ``tuple``"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:93
#: ../doc/1.7/dev_guide/reference_capi/box.rst:108
msgid "output argument. Resulted tuple. Can be set to NULL to discard result"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:96
#: ../doc/1.7/dev_guide/reference_capi/box.rst:111
#: ../doc/1.7/dev_guide/reference_capi/box.rst:127
#: ../doc/1.7/dev_guide/reference_capi/box.rst:149
msgid "-1 on error (check :ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:99
msgid "See also :ref:`space_object.insert()<box_space-insert>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:103
msgid "Execute an REPLACE request."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:114
msgid "See also :ref:`space_object.replace()<box_space-replace>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:118
msgid "Execute an DELETE request."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:121
#: ../doc/1.7/dev_guide/reference_capi/box.rst:137
#: ../doc/1.7/dev_guide/reference_capi/box.rst:159
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:114
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:153
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:163
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:173
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:192
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:208
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:224
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:240
msgid "index identifier"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:122
#: ../doc/1.7/dev_guide/reference_capi/box.rst:138
msgid "encoded key in MsgPack Array format ([ field1, field2, ...])"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:123
#: ../doc/1.7/dev_guide/reference_capi/box.rst:139
msgid "end of a ``key``"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:124
#: ../doc/1.7/dev_guide/reference_capi/box.rst:146
#: ../doc/1.7/dev_guide/reference_capi/box.rst:168
msgid "output argument. Result an old tuple. Can be set to NULL to discard result"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:130
msgid "See also :ref:`space_object.delete()<box_space-delete>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:134
msgid "Execute an UPDATE request."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:140
#: ../doc/1.7/dev_guide/reference_capi/box.rst:162
msgid "encoded operations in MsgPack Arrat format, e.g. ``[[ '=', field_id,  value ], ['!', 2, 'xxx']]``"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:142
#: ../doc/1.7/dev_guide/reference_capi/box.rst:164
msgid "end of a ``ops``"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:143
#: ../doc/1.7/dev_guide/reference_capi/box.rst:165
msgid "0 if field_ids in update operation are zero-based indexed (like C) or 1 if for one-based indexed field ids (like Lua)."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:152
msgid "See also :ref:`space_object.update()<box_space-update>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:156
msgid "Execute an UPSERT request."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:171
msgid "-1 on error (check ::ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box.rst:174
msgid "See also :ref:`space_object.upsert()<box_space-upsert>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:31
msgid "Module `index`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:35
msgid "A space iterator"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:41
msgid "Controls how to iterate over tuples in an index. Different index types support different iterator types. For example, one can start iteration from a particular value (request key) and then retrieve all tuples where keys are greater or equal (= GE) to this key."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:46
msgid "If iterator type is not supported by the selected index type, iterator constructor must fail with ER_UNSUPPORTED. To be selectable for primary key, an index must support at least ITER_EQ and ITER_GE types."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:50
msgid "NULL value of request key corresponds to the first or last key in the index, depending on iteration direction. (first key for GE and GT types, and last key for LE and LT). Therefore, to iterate over all tuples in an index, one can use ITER_GE or ITER_LE iteration types with start key equal to NULL. For ITER_EQ, the key must not be NULL."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:58
msgid "key == x ASC order"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:62
msgid "key == x DESC order"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:66
msgid "all tuples"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:70
msgid "key < x"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:74
msgid "key <= x"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:78
msgid "key >= x"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:82
msgid "key > x"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:86
msgid "all bits from x are set in key"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:90
msgid "at least one x's bit is set"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:94
msgid "all bits are not set"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:98
msgid "key overlaps x"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:102
msgid "tuples in distance ascending order from specified point"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:108
msgid "Allocate and initialize iterator for space_id, index_id."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:110
msgid "The returned iterator must be destroyed by :ref:`box_iterator_free<c_api-box_index-box_iterator_free>`."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:115
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:241
msgid ":ref:`iterator_type<c_api-box_index-iterator_type>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:116
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:193
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:209
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:225
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:242
msgid "encode key in MsgPack Array format ([part1, part2, ...])"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:117
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:194
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:210
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:226
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:243
msgid "the end of encoded ``key``"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:119
msgid "NULL on error (check :ref:box_error_last`c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:120
msgid "iterator otherwise"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:122
msgid "See also :ref:`box_iterator_next<c_api-box_index-box_iterator_next>`, :ref:`box_iterator_free<c_api-box_index-box_iterator_free>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:129
msgid "Retrieve the next item from the ``iterator``."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:131
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:145
msgid "an iterator returned by :ref:box_index_iterator`c_api-box_index-box_index_iterator>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:133
msgid "output argument. result a tuple or NULL if there is no more data."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:136
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:155
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:165
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:198
msgid "-1 on error (check :ref:box_error_last`c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:137
msgid "0 on success. The end of data is not an error."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:143
msgid "Destroy and deallocate iterator."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:150
msgid "Return the number of element in the index."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:156
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:166
msgid ">= 0 otherwise"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:160
msgid "Return the number of bytes used in memory by the index."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:170
msgid "Return a random tuple from the index (useful for statistical analysis)."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:174
msgid "random seed"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:175
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:195
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:211
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:227
msgid "output argument. result a tuple or NULL if there is no tuples in space"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:178
msgid "See also: :ref:`index_object.random<box_index-random>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:184
msgid "Get a tuple from index by the key."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:186
msgid "Please note that this function works much more faster than :ref:`index_object.select<box_index-select>` or :ref:`box_index_iterator<c_api-box_index-box_index_iterator>` + :ref:`box_iterator_next<c_api-box_index-box_iterator_next>`."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:199
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:215
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:231
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:246
#: ../doc/1.7/dev_guide/reference_capi/txn.rst:44
#: ../doc/1.7/dev_guide/reference_capi/txn.rst:51
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:93
msgid "0 on success"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:201
msgid "See also: ``index_object.get()``"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:205
msgid "Return a first (minimal) tuple matched the provided key."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:214
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:230
#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:245
msgid "-1 on error (check :ref:box_error_last()`c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:217
msgid "See also: :ref:`index_object.min()<box_index-min>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:221
msgid "Return a last (maximal) tuple matched the provided key."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:233
msgid "See also: :ref:`index_object.max()<box_index-max>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:237
msgid "Count the number of tuple matched the provided key."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/box_index.rst:248
msgid "See also: :ref:`index_object.count()<box_index-count>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/clock.rst:31
msgid "Module `clock`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:31
msgid "Module `coio`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:37
msgid "READ event"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:41
msgid "WRITE event"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:45
msgid "Wait until READ or WRITE event on socket (``fd``). Yields."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:47
msgid "non-blocking socket file description"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:48
msgid "requested events to wait. Combination of ``COIO_READ | COIO_WRITE`` bit flags."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:50
msgid "timeout in seconds."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:52
msgid "0 - timeout"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:53
msgid ">0 - returned events. Combination of ``TNT_IO_READ | TNT_IO_WRITE`` bit flags."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:57
msgid "Create new eio task with specified function and arguments. Yield and wait until the task is complete or a timeout occurs."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:60
msgid "This function doesn't throw exceptions to avoid double error checking: in most cases it's also necessary to check the return value of the called function and perform necessary actions. If func sets errno, the errno is preserved across the call."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:65
msgid "-1 and ``errno`` = ENOMEM if failed to create a task"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:66
msgid "the function return (``errno`` is preserved)."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:70
msgid "static ssize_t openfile_cb(va_list ap)\n"
"{\n"
"        const char* filename = va_arg(ap);\n"
"        int flags = va_arg(ap);\n"
"        return open(filename, flags);\n"
"}\n"
"\n"
"if (coio_call(openfile_cb, 0.10, \"/tmp/file\", 0) == -1)\n"
"    // handle errors.\n"
"..."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/coio.rst:86
msgid "Fiber-friendly version of :manpage:`getaddrinfo(3)`."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:31
msgid "Module `error`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:157
msgid "Error - contains information about error."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:161
msgid "Return the error type, e.g. \"ClientError\", \"SocketError\", etc."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:163
#: ../doc/1.7/dev_guide/reference_capi/error.rst:170
#: ../doc/1.7/dev_guide/reference_capi/error.rst:177
msgid "error"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:164
#: ../doc/1.7/dev_guide/reference_capi/error.rst:178
msgid "not-null string"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:168
msgid "Return IPROTO error code"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:171
msgid "enum :ref:`box_error_code <capi-box_error_code>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:175
msgid "Return the error message"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:184
msgid "Get the information about the last API call error."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:186
msgid "The Tarantool error handling works most like libc's errno. All API calls return -1 or NULL in the event of error. An internal pointer to box_error_t type is set by API functions to indicate what went wrong. This value is only significant if API call failed (returned -1 or NULL)."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:191
msgid "Successful function can also touch the last error in some cases. You don't have to clear the last error before calling API functions. The returned object is valid only until next call to **any** API function."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:195
msgid "You must set the last error using box_error_set() in your stored C procedures if you want to return a custom error message. You can re-throw the last API error to IPROTO client by keeping the current value and returning -1 to Tarantool from your stored procedure."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:200
msgid "last error"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:204
msgid "Clear the last error."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:208
msgid "Set the last error."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:212
msgid "IPROTO :ref:`error code<capi-box_error_code>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:214
#: ../doc/1.7/dev_guide/reference_capi/say.rst:59
#: ../doc/1.7/dev_guide/reference_capi/say.rst:73
msgid "format arguments"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:216
msgid "See also: IPROTO :ref:`error code<capi-box_error_code>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/error.rst:220
msgid "A backward-compatible API define."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:31
msgid "Module `fiber`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:35
msgid "Fiber - contains information about fiber"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:41
msgid "Create a new fiber."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:43
msgid "Takes a fiber from fiber cache, if it's not empty. Can fail only if there is not enough memory for the fiber structure or fiber stack."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:46
msgid "The created fiber automatically returns itself to the fiber cache when its \"main\" function completes."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:49
msgid "string with fiber name"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:50
msgid "func for run inside fiber"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:52
msgid "See also: :ref:`fiber_start()<c_api-fiber-fiber_start>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:56
msgid "Return control to another fiber and wait until it'll be woken."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:58
msgid "See also: :ref:`fiber_wakeup()<c_api-fiber-fiber_wakeup>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:64
msgid "Start execution of created fiber."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:66
msgid "fiber to start"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:67
msgid "arguments to start the fiber with"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:73
msgid "Interrupt a synchronous wait of a fiber"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:75
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:111
msgid "fiber to be woken up"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:79
msgid "Cancel the subject fiber (set ``FIBER_IS_CANCELLED`` flag)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:81
msgid "If target fiber's flag ``FIBER_IS_CANCELLABLE`` set, then it would be woken up (maybe prematurely). Then current fiber yields until the target fiber is dead (or is woken up by :ref:`fiber_wakeup()<c_api-fiber-fiber_wakeup>`)."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:85
msgid "fiber to be cancelled"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:89
msgid "Make it possible or not possible to wakeup the current fiber immediately when it's cancelled."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:92
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:103
msgid "fiber"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:93
#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:104
msgid "status to set"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:95
msgid "previous state"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:101
msgid "Set fiber to be joinable (``false`` by default)."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:108
msgid "Wait until the fiber is dead and then move its execution status to the caller. The fiber must not be detached."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:113
msgid "Before: ``FIBER_IS_JOINABLE`` flag is set."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:115
msgid "See also: :ref:`fiber_set_joinable()<c_api-fiber-fiber_set_joinable>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:119
msgid "Put the current fiber to sleep for at least 's' seconds."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:121
msgid "time to sleep"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:123
msgid "Note: this is a cancellation point."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:125
msgid "See also: :ref:`fiber_is_cancelled()<c_api-fiber-fiber_is_cancelled>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:131
msgid "Check current fiber for cancellation (it must be checked manually)."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:135
msgid "Report loop begin time as double (cheap)."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:139
msgid "Report loop begin time as 64-bit int."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:143
msgid "Reschedule fiber to end of event loop cycle."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/fiber.rst:149
msgid "Return slab_cache suitable to use with ``tarantool/small`` library"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/index.rst:33
msgid "C API reference"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/index.rst:35
msgid "List of C API headers"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:31
msgid "Module `latch`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:35
msgid "A lock for cooperative multitasking environment"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:39
msgid "Allocate and initialize the new latch."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:41
msgid "allocated latch object"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:0
#: ../doc/1.7/dev_guide/reference_capi/latch.rst:0
msgid "Return type"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:42
msgid "box_latch_t *"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:46
msgid "Destroy and free the latch."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:48
msgid "latch to destroy"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:52
msgid "Lock a latch. Waits indefinitely until the current fiber can gain access to the latch."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:0
msgid "param box_latch_t* latch"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:55
#: ../doc/1.7/dev_guide/reference_capi/latch.rst:61
msgid "latch to lock"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:59
msgid "Try to lock a latch. Return immediately if the latch is locked."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:62
msgid "status of operation. 0 - success, 1 - latch is locked"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:63
msgid "int"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:67
msgid "Unlock a latch. The fiber calling this function must own the latch."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/latch.rst:69
msgid "latch to unlock"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/say.rst:31
msgid "Module `say` (logging)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/say.rst:39
msgid "do not use this value directly"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/say.rst:55
#: ../doc/1.7/dev_guide/reference_capi/say.rst:70
msgid "Format and print a message to Tarantool log file."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/say.rst:57
msgid ":ref:`log level <c_api-say-say_level>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/say.rst:58
#: ../doc/1.7/dev_guide/reference_capi/say.rst:72
msgid "``printf()``-like format string"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/say.rst:61
#: ../doc/1.7/dev_guide/reference_capi/say.rst:75
msgid "See also :manpage:`printf(3)`, :ref:`say_level<c_api-say-say_level>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/say.rst:79
msgid "say_info(\"Some useful information: %s\", status);"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:31
msgid "Module `schema`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:39
msgid "Start of the reserved range of system spaces."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:43
msgid "Space id of _schema."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:47
msgid "Space id of _space."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:51
msgid "Space id of _vspace view."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:55
msgid "Space id of _index."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:59
msgid "Space id of _vindex view."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:63
msgid "Space id of _func."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:67
msgid "Space id of _vfunc view."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:71
msgid "Space id of _user."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:75
msgid "Space id of _vuser view."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:79
msgid "Space id of _priv."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:83
msgid "Space id of _vpriv view."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:87
msgid "Space id of _cluster."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:91
msgid "End of reserved range of system spaces."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/schema.rst:95
msgid "NULL value, returned on error."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:31
msgid "Module `trivia/config`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:35
msgid "Extern modifier for all public functions."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:39
msgid "Package major version - 1 for 1.7.0."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:43
msgid "Package minor version - 7 for 1.7.0."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:47
msgid "Package patch version - 0 for 1.7.0."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:51
msgid "A string with major-minor-patch-commit-id identifier of the release, e.g. 1.7.0-1216-g73f7154."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:56
msgid "System configuration dir (e.g ``/etc``)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:60
msgid "Install prefix (e.g. ``/usr``)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:64
msgid "Build type, e.g. Debug or Release"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:68
msgid "CMake build type signature, e.g. ``Linux-x86_64-Debug``"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:72
msgid "Command line used to run CMake."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:76
msgid "Pathes to C and CXX compilers."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:80
msgid "C compile flags used to build Tarantool."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:84
msgid "CXX compile flags used to build Tarantool."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:88
msgid "A path to install ``*.lua`` module files."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:92
msgid "A path to install ``*.so``/``*.dylib`` module files."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:96
msgid "A path to Lua includes (the same directory where this file is contained)"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:100
msgid "A constant added to ``package.path`` in Lua to find ``*.lua`` module files."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/trivia.rst:104
msgid "A constant added to ``package.cpath`` in Lua to find ``*.so`` module files."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:31
msgid "Module `tuple`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:39
msgid "Tuple format."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:41
msgid "Each Tuple has associated format (class). Default format is used to create tuples which are not attach to any particular space."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:46
msgid "Tuple"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:52
msgid "Allocate and initialize a new tuple from a raw MsgPack Array data."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:54
msgid "tuple format. Use :ref:`box_tuple_format_default()<c_api-tuple-box_tuple_format_default>` to create space-independent tuple."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:57
msgid "tuple data in MsgPack Array format ([field1, field2, ...])"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:58
msgid "the end of ``data``"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:60
#: ../doc/1.7/dev_guide/reference_capi/txn.rst:65
msgid "NULL on out of memory"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:61
msgid "tuple otherwise"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:63
msgid "See also: :ref:`box.tuple.new()<box_tuple-new>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:69
msgid "Increase the reference counter of tuple."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:71
msgid "Tuples are reference counted. All functions that return tuples guarantee that the last returned tuple is refcounted internally until the next call to API function that yields or returns another tuple."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:75
msgid "You should increase the reference counter before taking tuples for long processing in your code. Such tuples will not be garbage collected even if another fiber remove they from space. After processing please decrement the reference counter using :ref:`box_tuple_unref()<c_api-tuple-box_tuple_unref>`, otherwise the tuple will leak."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:82
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:95
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:108
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:114
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:133
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:148
msgid "a tuple"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:84
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:97
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:126
msgid "-1 on error"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:87
msgid "See also: :ref:`box_tuple_unref()<c_api-tuple-box_tuple_unref>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:93
msgid "Decrease the reference counter of tuple."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:100
msgid "See also: :ref:`box_tuple_ref()<c_api-tuple-box_tuple_ref>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:106
msgid "Return the number of fields in tuple (the size of MsgPack Array)."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:112
msgid "Return the number of bytes used to store internal tuple data (MsgPack Array)."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:118
msgid "Dump raw MsgPack data to the memory buffer ``buf`` of size ``size``."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:120
msgid "Store tuple fields in the memory buffer."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:122
msgid "Upon successful return, the function returns the number of bytes written. If buffer size is not enough then the return value is the number of bytes which would have been written if enough space had been available."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:127
msgid "number of bytes written on success."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:131
msgid "Return the associated format."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:135
msgid "tuple format"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:141
msgid "Return the raw tuple field in MsgPack format. The result is a pointer to raw MessagePack data which can be decoded with mp_decode functions, for an example see the tutorial program :ref:`read.c <f_c_tutorial-read>`."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:146
msgid "The buffer is valid until next call to box_tuple_* functions."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:149
msgid "zero-based index in MsgPack array."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:151
msgid "NULL if i >= :ref:`box_tuple_field_count()<c_api-tuple-box_tuple_field_count>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:152
msgid "msgpack otherwise"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:156
msgid "Tuple iterator"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:160
msgid "Allocate and initialize a new tuple iterator. The tuple iterator allow to iterate over fields at root level of MsgPack array."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:165
msgid "box_tuple_iterator_t* it = box_tuple_iterator(tuple);\n"
"if (it == NULL) {\n"
"    // error handling using box_error_last()\n"
"}\n"
"const char* field;\n"
"while (field = box_tuple_next(it)) {\n"
"    // process raw MsgPack data\n"
"}\n"
"\n"
"// rewind iterator to first position\n"
"box_tuple_rewind(it)\n"
"assert(box_tuple_position(it) == 0);\n"
"\n"
"// rewind three fields\n"
"field = box_tuple_seek(it, 3);\n"
"assert(box_tuple_position(it) == 4);\n"
"\n"
"box_iterator_free(it);"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:188
msgid "Destroy and free tuple iterator"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:194
msgid "Return zero-based next position in iterator. That is, this function return the field id of field that will be returned by the next call to :ref:`box_tuple_next()<c_api-tuple-box_tuple_next>`. Returned value is zero after initialization or rewind and :ref:`box_tuple_field_count()<c_api-tuple-box_tuple_field_count>` after the end of iteration."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:201
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:208
#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:222
msgid "a tuple iterator"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:202
msgid "position"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:206
msgid "Rewind iterator to the initial position."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:210
msgid "After: ``box_tuple_position(it) == 0``"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:214
msgid "Seek the tuple iterator."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:216
msgid "The result is a pointer to raw MessagePack data which can be decoded with mp_decode functions, for an example see the tutorial program :ref:`read.c <f_c_tutorial-read>`. The returned buffer is valid until next call to box_tuple_* API. Requested field_no returned by next call to box_tuple_next(it)."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:223
msgid "field number - zero-based position in MsgPack array"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:226
msgid "After:"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:228
msgid "``box_tuple_position(it) == field_not`` if returned value is not NULL."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:229
msgid "``box_tuple_position(it) == box_tuple_field_count(tuple)`` if returned value is NULL."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:236
msgid "Return the next tuple field from tuple iterator."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:238
msgid "The result is a pointer to raw MessagePack data which can be decoded with mp_decode functions, for an example see the tutorial program :ref:`read.c <f_c_tutorial-read>`. The returned buffer is valid until next call to box_tuple_* API."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:244
msgid "NULL if there are no more fields"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:245
msgid "MsgPack otherwise"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:247
msgid "Before: :ref:`box_tuple_position()<c_api-tuple-box_tuple_position>` is zero-based ID of returned field."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/tuple.rst:250
msgid "After: ``box_tuple_position(it) == box_tuple_field_count(tuple)`` if returned value is NULL."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/txn.rst:31
msgid "Module `txn`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/txn.rst:35
msgid "Return true if there is an active transaction."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/txn.rst:39
msgid "Begin a transaction in the current fiber."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/txn.rst:41
msgid "A transaction is attached to caller fiber, therefore one fiber can have only one active transaction."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/txn.rst:45
msgid "-1 on error. Perhaps a transaction has already been started"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/txn.rst:49
msgid "Commit the current transaction."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/txn.rst:52
msgid "-1 on error. Perhaps a disk write failure"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/txn.rst:56
msgid "Rollback the current transaction."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/txn.rst:60
msgid "Allocate memory on txn memory pool."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/txn.rst:62
msgid "The memory is automatically deallocated when the transaction is committed or rolled back."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:31
msgid "Module `lua/utils`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:37
msgid "Push cdata of given ``ctypeid`` onto the stack."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:39
msgid "CTypeID must be used from FFI at least once. Allocated memory returned uninitialized. Only numbers and pointers are supported."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:42
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:55
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:70
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:77
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:90
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:102
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:109
msgid "Lua State"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:43
msgid "FFI's CTypeID of this cdata"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:45
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:59
msgid "memory associated with this cdata"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:47
msgid "See also: :ref:`luaL_checkcdata()<c_api-utils-luaL_checkcdata>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:53
msgid "Checks whether the function argument ``idx`` is a cdata"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:56
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:71
msgid "stack index"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:57
msgid "output argument. FFI's CTypeID of returned cdata"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:61
msgid "See also: :ref:`luaL_pushcdata()<c_api-utils-luaL_pushcdata>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:65
msgid "Sets finalizer function on a cdata object."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:67
msgid "Equivalent to call `ffi.gc(obj, function)`. Finalizer function must be on the top of the stack."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:75
msgid "Return CTypeID (FFI) of given СDATA type"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:78
msgid "C type name as string (e.g. \"struct request\" or \"uint32_t\")"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:81
msgid "CTypeID"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:83
msgid "See also: :ref:`luaL_pushcdata()<c_api-utils-luaL_pushcdata>`, :ref:`luaL_checkcdata()<c_api-utils-luaL_checkcdata>`"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:88
msgid "Declare symbols for FFI"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:91
msgid "C definitions (e.g. \"struct stat\")"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:94
msgid "``LUA_ERRRUN``, ``LUA_ERRMEM` or ``LUA_ERRERR`` otherwise."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:96
msgid "See also: ``ffi.cdef(def)``"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:100
msgid "Push uint64_t onto the stack"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:103
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:110
msgid "value to push"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:107
msgid "Push int64_t onto the stack"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:114
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:128
msgid "Checks whether the argument idx is a uint64 or a convertable string and returns this number."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:0
msgid "throws"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:117
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:124
msgid "error if the argument can't be converted"
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:121
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:135
msgid "Checks whether the argument idx is a int64 or a convertable string and returns this number."
msgstr ""

#: ../doc/1.7/dev_guide/reference_capi/utils.rst:131
#: ../doc/1.7/dev_guide/reference_capi/utils.rst:138
msgid "the converted number or 0 of argument can't be converted"
msgstr ""

#: ../doc/1.7/dev_guide/release_management.rst:31
msgid "Release management"
msgstr ""

#: ../doc/1.7/dev_guide/release_management.rst:34
msgid "How to make a minor release"
msgstr ""

#: ../doc/1.7/dev_guide/release_management.rst:36
msgid "$ git tag -a 1.4.4 -m \"Next minor in 1.4 series\"\n"
"$ vim CMakeLists.txt # edit CPACK_PACKAGE_VERSION_PATCH\n"
"$ git push --tags"
msgstr ""

#: ../doc/1.7/dev_guide/release_management.rst:42
msgid "Update the Web site in doc/www"
msgstr ""

#: ../doc/1.7/dev_guide/release_management.rst:44
msgid "Update all issues, upload the ChangeLog based on ``git log`` output. The ChangeLog must only include items which are mentioned as issues on github. If anything significant is there, which is not mentioned, something went wrong in release planning and the release should be held up until this is cleared."
msgstr ""

#: ../doc/1.7/dev_guide/release_management.rst:50
msgid "Click 'Release milestone'. Create a milestone for the next minor release. Alert the driver to target bugs and blueprints to the new milestone."
msgstr ""

